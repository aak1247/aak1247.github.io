<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[跨平台兼容设计]]></title>
      <url>http://www.aak1247.cn/blogs/2025/%25E8%25B7%25A8%25E5%25B9%25B3%25E5%258F%25B0%25E5%2585%25BC%25E5%25AE%25B9%25E8%25AE%25BE%25E8%25AE%25A1.html</url>
      <content type="html"><![CDATA[<h1 id="导航设计"><a href="#导航设计" class="headerlink" title="导航设计"></a>导航设计</h1><p>PC导航一般采用左侧导航栏+分级导航的设计，整体逻辑结构是：左-&gt;右依次深入；<br>移动端导航一般采用底部导航 且 只做单级导航，低频功能可以收起做子页面；</p>
<h2 id="多级兼容"><a href="#多级兼容" class="headerlink" title="多级兼容"></a>多级兼容</h2><h3 id="隐藏分级"><a href="#隐藏分级" class="headerlink" title="隐藏分级"></a>隐藏分级</h3><p>最简单的方式是类似飞书的设计，分级导航是一个切换逻辑，本身不是必选项。也就是说，完全可以将分级导航隐藏起来（飞书的分级是Filter），如此一来，分级就可以在移动端通过触发侧边栏来进行操作。</p>
<h3 id="不做分级"><a href="#不做分级" class="headerlink" title="不做分级"></a>不做分级</h3><p>企业微信的做法更直接，两端都不做分级。<br>但是这会带来一个问题，那就是PC的侧边导航信息过少（如果只有移动端的底部导航）。企业微信提供的解决办法：</p>
<ol>
<li>移动端除了底部导航之外，还有顶部快捷方式，这个也放到PC的侧边导航里去</li>
<li>PC侧边导航可以有独有的快捷入口<br>这种设计更多，类似todesk、tim都是类似的设计。</li>
</ol>
<h1 id="主交互区设计"><a href="#主交互区设计" class="headerlink" title="主交互区设计"></a>主交互区设计</h1><p>一个基本差异在于移动端是上下垂直式的信息排列；而PC需要更多的水平排列；<br>常见思路：</p>
<ol>
<li>完全同构<ol>
<li>由PC向移动端水平压缩</li>
<li>由移动端向PC水平拉伸</li>
<li>PC调整可交互区域尺寸，转化为移动端布局</li>
</ol>
</li>
<li>部分同构<ol>
<li>PC上同时水平放置移动端两个页面（或tab）的功能，将垂直转化为水平：例如企业微信、QQ、飞书、钉钉</li>
<li>移动端将PC上水平分布的信息重新排布，水平转化为垂直：瀑布流信息、sspanel</li>
</ol>
</li>
<li>完全异构：相同功能重新布局信息，比如todesk</li>
</ol>
<h1 id="布局兼容"><a href="#布局兼容" class="headerlink" title="布局兼容"></a>布局兼容</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>PC列表页展示信息较多，注重对信息的概览；而移动端更注重交互，所以这里的兼容设计重点在保留关键信息（如ID、名称等）的基础上对非必要信息做隐藏，以保证布局的正常。</p>
<h2 id="弹框"><a href="#弹框" class="headerlink" title="弹框"></a>弹框</h2><p>一般问题不大，可以全屏化类似子页面，保证弹框的PC初始宽度不要太宽即可。如果真的有太宽的也可以直接在弹框内左响应式布局。</p>
<h1 id="交互兼容"><a href="#交互兼容" class="headerlink" title="交互兼容"></a>交互兼容</h1><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>PC搜索多采用顶部搜索，移动端可以直接复用，参考搜索引擎；<br>如果搜索起始页较长（如列表页），可以采用固定搜索按钮+点击唤起搜索弹框的方式，参考手机微信。</p>
<h2 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h2><p>较少的右键菜单可以转化为点击后下方展示的按钮、左滑后右侧的按钮、长按后的快捷方式，或者直接点击后弹出抽屉；<br>较多的右键菜单有以下思路：</p>
<ol>
<li>隐藏部分低频或不必要菜单</li>
<li>分级，即点击展示部分按钮，然后保留一个更多按钮，点击更多再通过类似弹出框或抽屉的方式附加一些操作</li>
<li>直接通过抽屉</li>
</ol>
<h1 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h1><h2 id="导航层级太多"><a href="#导航层级太多" class="headerlink" title="导航层级太多"></a>导航层级太多</h2><p>可以模仿企业微信、飞书等，部分功能抽离出来单独的子应用，然后做应用内导航。</p>
]]></content>
      
        <categories>
            
            <category> 产品 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创业笔记 </tag>
            
            <tag> 产品 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有关初心]]></title>
      <url>http://www.aak1247.cn/blogs/2024/%25E6%259C%2589%25E5%2585%25B3%25E5%2588%259D%25E5%25BF%2583.html</url>
      <content type="html"><![CDATA[<p>有关创业的初心。</p>
<span id="more"></span>

<p>经常和人讲以终为始，但是每当静下心来想确认那个点到底是什么，连自己也很难回答上来。<br>人生就是这样一个驳杂的东西啊。对于大部分人来讲，事业，世界观，家庭，友情，没有哪段调子能够一以贯之地作为主旋律长久延续。从某种程度上来说，这些东西反而更像是乐器，总是此起彼伏地交织成一首未必成曲的音调序列，寥寥草草地奏完就到了下场的时间。</p>
<p>这么说起来似乎有些悲伤。然而唯物史观不需要悲伤，历史就是历史，人生就是人生。漫长的一生也不过是一段话，或者构成一段话的背景，再或者背景里的一点点细节。</p>
<p>年幼时喜欢读书，那时的人生目标都是从别人那里拿来的。既想考父母口中的清华北大，也想成读书人口中的三不朽。后来拿来的东西变成了执念，达不成的成为“生命中的云翳“，尚未及的便成了遥远的地平线。</p>
<p>以德、功、言长存于世而不朽，大概是能超越历史的一种方式了。可惜人生不能直接写在史书上，还需要走大量的弯路，还需要吃大量的米和盐。</p>
<p>只有这样才能吃过的盐比别人吃过的米多。</p>
<p>从某种意义上说，创业者确实是最容易达成三不朽的职业了，这大概也是冒着极大的风险选择这条道路所能获得的最大额外收益了。曾经告诉一个创业的学长，我希望通过工程(实)和思想(虚)尽可能多地改造、影响行业或者一部分人。这个初心大概到现在也不曾改变。</p>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创业笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创业笔记20240920]]></title>
      <url>http://www.aak1247.cn/blogs/2024/%25E5%2588%259B%25E4%25B8%259A%25E7%25AC%2594%25E8%25AE%25B020240920.html</url>
      <content type="html"><![CDATA[<p>接下来可能会在博客里记录一些有关创业的笔记，不涉及敏感信息的内容，都会用这种形式记录一下。</p>
<span id="more"></span>

<p>又到了周五，总结一下一周的工作：</p>
<ul>
<li>这周花了很多的时间折腾博客。我当然从不期望用它变现，某种意义上，这是比其他途径更加安全的笔记方式，这种孤立于社交网络外又具有一定表达属性的区域显得颇有些珍贵——尤其是它多少还有些酷。</li>
<li>农林废弃物的回收方面，受到天气的影响，整体的进度有些滞后。但是相应地也获得了更多的时间完善APP，收运中的管理风险稍微小了那么一点点，业务风险大了那么一点点。希望这一次顺利收到预期的回收量，并且卖出去。</li>
<li>海外的项目有一定的进度，开了一个线上会，接下来敲定价格，完成测试，顺利的话就可以进入到成交阶段。</li>
<li>对于多云管理的产品，目前有些无从下手的感觉，总觉得这种偏向于商业级的应用个人来做风险大了一些，另外它需要投入的时间有些不可控。接下来可能会把这个项目交给研发底下的孩子们来做，有一定的信心它可以对公司产生一定的收入。</li>
<li>业余时间可能会开始做一个简单的launcher，期望比较低，能够满足个人的使用需求即可。它的定位大概是方便把自己的一些需求实现出来，第一版大概是这样：<ul>
<li>基础的文件检索和打开</li>
<li>内置搜索引擎可以进行搜索</li>
<li>运行命令</li>
<li>创建文件</li>
<li>简单的插件机制，调用插件执行命令</li>
</ul>
</li>
<li>做完第一版可能会考虑做一个更完善的东西，比如可以做服务插件，更完善的配置等。做完这一版再说吧。<br>最近的状态比之前好了很多，虽然也花了不少的时间去解决生活方面的问题，但是花费在无效流程里的时间少太多了。这样的节奏舒服很多，尤其是暂时可以把重心放在工作中。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创业笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是Build in public]]></title>
      <url>http://www.aak1247.cn/blogs/2024/build-in-public.html</url>
      <content type="html"><![CDATA[<p>顾名思义，Build in public就是在公共视野中构建（产品）。</p>
<span id="more"></span>

<p>传统的企业创建模式更多倾向于在一个较为隐蔽的环境里构建出一个具备独特优势的产品，这一过程的重点就在于将独创性的idea或者独特的技术优势转化为一个具象的产品。这有一点像憋大招，需要经过一段时间的蓄力以后打出高额的伤害——建立别人无法很快超越的壁垒。</p>
<p>好处是显而易见的，在竞争充分的环境里如果过早地暴露，一个绝佳的idea毫无疑问会吸引到过多的关注，进而被模仿甚至被恶意地破坏。但是与此同时，也带来了无法避免的系统性风险——idea到底行不行，只有在最终蓄力完成以后才能最终确认。而结果的不确定性毫无疑问使得蓄力变得更为煎熬，也更加难以坚持(主观和客观上)，并且坚持到最后也未必是有用的产品。</p>
<p>Build in public的思路恰恰相反，它鼓励创业者把整个产品的构建过程暴露在公众视野中。这可能是由于软件工程领域的诸多产出构成了一个神奇的结果：我们有了敏捷开发，有了开源，有了社交媒体，因而可以从一开始就可以直接接触用户，并时刻根据用户的需求和反馈修正产品的方向，进而满足用户的真实需求。</p>
<p>在开源软件社区，这一实践已经颇有历史，从Linux这样的开源先驱，到现在的github，开发者对Build in public已经习以为常。而在众筹火起来以后，这股风也烧到了更多领域，不少优秀的产品就是来自于idea+众筹，比如<strong>Oculus</strong>。</p>
<p>我在《小而美》一书中第一次听说这种方法论以后，顿时联想到了魅族、小米、一加、锤子、酷安、微信读书。这些产品都曾经在某个时期拥有一大批忠实的用户，也都曾经拥有相当不错的粉丝口碑。不同于苹果式的“我不要你觉得，我要我觉得”，他们的完善过程相当粗暴——1.维护一个社区；2.收集社区对产品的反馈和需求； 3. 满足社区的期待。</p>
<p>这就好像兵法中的“守正用奇”。以正合，以奇胜，满足用户的期望是正，而偶尔超出期望的效果就是奇。只有足够多的正，才能支撑出偶尔兴奋型的奇。这大概就是我理想中的创业方式和路径。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创业笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日记20240709]]></title>
      <url>http://www.aak1247.cn/blogs/2024/%25E6%2597%25A5%25E8%25AE%25B020240709.html</url>
      <content type="html"><![CDATA[<p>又是很久没写日记了，这三年来称得上是兵荒马乱，仿佛已过去很多年，又仿佛才是昨天。</p>
<span id="more"></span>

<p>从21年起坚持每年在年中做一个短小精悍的总结，然后前年没敢做，去年不想做，今年又忘了做。</p>
<p>过去的很多年里，从前觉得人生的主旋律应当是冲出途中一个又一个的阻碍，攻克一个又一个的关卡。一直到最近3年才学到人生未必总能如愿。不如愿时怎么都不如愿，用力反思尽力改进未必能有半分的寸进。就如同带兵打仗并不能总是站在胜利者一方，甚至并不能总是站在进攻方——防守方最大的胜利也只是能少一点损失。于庞大的战场中，这一点点胜利带来的甚至也难有半分的优势，总是有人胜利，也总是有人在进攻方。</p>
<p>所以啊，我们该怎么打这场仗呢？垃圾时间里怎么才能不做一个垃圾，这是每一个垃圾都应当思考的问题。</p>
<p>躺平难以不做垃圾。奋进难以不息。<br>还是快乐一点吧。垃圾时间，也是游戏时间。但是这个自定义游戏的主题和内容，只能看玩家自己的。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 垃圾时间 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[May the Force Be With You]]></title>
      <url>http://www.aak1247.cn/blogs/2024/May%2520the%2520Force%2520Be%2520With%2520You.html</url>
      <content type="html"><![CDATA[<p>  一篇公众号里发不出去的旧文。</p>
<span id="more"></span>

<p>​    在不写作的日子里存了满满的素材，但总疑心过于偏激而没有写作的勇气。反而是在大家都处在情绪的峰值，我便有了我并不十分偏激的感知。</p>
<p>   时常为了获取一份真实的信息尝试各种办法而不得其途，这并非独属于我们的困境。舆论总是承担着本不应该属于它的责任。在北溪管道被炸事件中东西方的舆论体系中充斥着完全不同的推论：我们确认美国人递了刀子，而外媒普遍宣称俄罗斯自断其臂。人们总有基于自身利益合理推理的空间和习惯，也总有基于自身利益引导其走向的动力。对别有用心引导的约束应当有正当性和透明度，这既是保证约束真正有意义的前提，也是手握利剑的应有谨慎。在大是大非面前，技巧总是应当让位于真诚和程序正义的。</p>
<p>   <strong>当合理精确的质疑也难逃404的命运，我们无法不以最坏的恶意去揣测</strong>身兼着正义之责的媒体、平台以及理应为事实负责的其他宣传机构。固然易地而处媒体自身的困境清晰可见，但没有一分进步是能够轻易得来的，底线前的挣扎本可以成为每一个人身为一国公民的尊严所依。</p>
<p>   每一次朋友圈刷屏往往都伴随着某些情绪的爆发和传播。比起事实更容易传播的是情绪，毕竟很多事实是显而易见和早已注定的，而直到它真正形成情绪的一刻才真正引发我们的集体性关注。情绪固然是非理性和偏激的，在短暂的爆发过后我们往往能找到传播中被放大和误读的细节并以反思，但这并不意味着情绪无意义。</p>
<p>   我们可以隔着一段距离冷静地审视情绪，思考更加客观的解决方案，这固然看似正确。但情绪本身依然有其价值。在主流媒体失去声音的时代，社交网络传播所构成的内容集便成为了唯一依然在挣扎的媒体声量。突破主流媒体勇气上限的内容的广泛传播无疑是社会进步的表现，<strong>而放弃这种传播能力不啻于一种妥协</strong>。</p>
<p>   <strong>情绪总会平静，短暂的爆发之后往往是漫长的反噬。希望我们都能记得自己所期望的救赎，也希望我们终能得到救赎。</strong></p>
]]></content>
      
        <categories>
            
            <category> 观点 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[身份社会和契约社会——写在唐山案之后]]></title>
      <url>http://www.aak1247.cn/blogs/2022/%25E8%25BA%25AB%25E4%25BB%25BD%25E7%25A4%25BE%25E4%25BC%259A%25E5%2592%258C%25E5%25A5%2591%25E7%25BA%25A6%25E7%25A4%25BE%25E4%25BC%259A%25E2%2580%2594%25E2%2580%2594%25E5%2586%2599%25E5%259C%25A8%25E5%2594%2590%25E5%25B1%25B1%25E6%25A1%2588%25E4%25B9%258B%25E5%2590%258E.html</url>
      <content type="html"><![CDATA[<p>一篇暴论。</p>
<span id="more"></span>

<p>  唐山案激起了我们对于男女平等，对于社会治安问题的格外关注，关于案件本身我仍处于一种奇怪的情绪之中，既目不忍视于施暴者的暴行，又诧异于在这个时代竟还有这样光明正大的犯罪，以致于一时不知该愤怒于什么。但本文要讨论的却不是案件，而是由案件引发的一些其他思考。罗翔老师说：“<strong>如果对于邪恶只有冷漠，而没有愤怒，那么正义也就是失去了感性的基础。</strong>”，我的愤怒无从排解，但舆论所表达的诉求却又似乎跨越了那道椭圆的边界。</p>
<p>  前现代社会有一个重要特征，在于其社会秩序的维系，不是依赖规范化程序化的现代契约，而是依赖于各种各样的标签和身份。</p>
<p><strong>身份是什么</strong>？<strong>男性</strong>，<strong>女性</strong>，<strong>官员</strong>，<strong>平民</strong>，<strong>资本家</strong>，<strong>打工人</strong>，<strong>丈夫</strong>，<strong>妻子</strong>，等等，这些都是身份。</p>
<p>   <strong>什么是契约呢</strong>？<strong>法律</strong>，<strong>法定婚姻</strong>，<strong>合同</strong>和<strong>协议</strong>等等，这些都是契约。</p>
<p>   理所当然，在所有的社会中，每一个个体都扮演着各种各样的身份和角色。如马克思《关于费尔巴哈的提纲》所说，人是一切社会关系的总和。我们必然处于种种的社会关系之中，这些社会关系也必然为我们带来各种各样的身份，但是身份关系和契约关系却有着一个本质的差别：</p>
<p>   身份是<strong>外界赋予</strong>的，而契约是<strong>自由订立严格遵守</strong>的（自然是有强制的公共契约的存在，但它依然是有前提受约束的，是群体意志的体现，换句话说是由群体意志自由订立的）。</p>
<p>   那么身份和契约会对社会带来什么<strong>不同</strong>呢？</p>
<p>   要回答这个问题，我们必须得谨慎地思考一个社会在由身份社会到契约社会，或由契约社会到身份社会转变过程中可能发生的变化。</p>
<p>   我们回过头来比较一下历史中存在过的各种社会：由不同动物组成的自然界、早期的族团社会、部落制以及集权国家。</p>
<p>   自然界中的社会模式也被称为<strong>丛林社会</strong>，其遵循唯一的法则：<strong>弱肉强食</strong>的丛林法则，动物之间主要通过无限制的竞争来共同发展。</p>
<p>   而在早期人类和其他一些灵长类动物的社会中，最初的社会模式是家庭或<strong>族团社会</strong>，在家庭社会中不存在太多财产。社会关系也十分简单，由血缘关系就构建起了整个社会的联系。所有的关系依然是基于身份的。这样的社会今天仍存在于爱斯基摩人、布须曼人和一些澳洲的土著人社会中。</p>
<p>   而在进入到游牧或农业的生产力阶段，社会也逐渐过渡到<strong>部落社会</strong>或者说宗族社会，社会中的成员有了更复杂的互动，宗族拥有了丰富的私产，也产生了复杂的分工、地位和身份，这一时期的社会依然是身份的。部落建立在血亲和更远的血亲之上，酋长是部落的首领，但通常没有太多强迫其他族群为他卖命的直接权力——他的权力只有在整个部落有共同目标时才有效。我们在今天的努尔人以及一些原始社会中依然能见到部落和宗族；</p>
<p>   而到了<strong>集权国家</strong>的阶段，社会发生了巨大的变化：分工和组织更加有序，一些职能的行使不再基于模糊的分工而由国家所垄断。那么，社会是如何由部落走向国家的呢？在生产力不断发展的过程中，个体通过让渡权力给集体，来借助集体高效的分工协作来追求更好的生活。当然，并非每一个个体都是自愿让渡权力的，征服与被征服的关系是古代社会中最常见的战争结果。遗憾的是，在前现代社会中，这个让渡过程是不可逆的：即让渡产生了统治阶级与被统治阶级的身份差异，而身份的差异是不可逆转的。</p>
<p>   那么，前现代社会中存在契约吗？</p>
<p>   在前现代社会中，宗教、道德伦理和尚不够完善的法律充当着契约的角色。但是社会中的个体却并不能自由订立契约，它也不能够得到严格的遵守——它永远在身份之下。什么意思呢？在封建帝国时代，我们有着完善的中华法系，从秦朝历经两千多年的发展，那么为什么未能形成一个法治化的社会呢？因为法治不能逾越身份的边界。皇帝和各级官员的权力并非由法律赋予。圣旨可以代替法律进行立法，也可以与法律的一般约定相违背。官员是否能严格执行律法也并不影响其身份。因而正义的边界无从确立——<strong>契约并非基于正义而确立，违背契约也未必被认为不义，因而对契约的保护便也失去了正义的根基</strong>。</p>
<p>   扯得有点儿远了。</p>
<p>   我想说什么呢。我们在最近的舆论场中见到了太多的讨论。对于正义的苛求和对于恶行的监督和控诉本是舆论的天然义务。<strong>然而如何达成正义呢？</strong></p>
<p>   我们大可以在每一个社会热点问题面前<strong>借用身份</strong>挑动群体的情绪来吸引流量或满足自己的情绪，但这无疑会把问题引向<strong>荒谬</strong>的另一面，进而陷入一种<strong>对正义的解构和异化</strong>。<strong>这怎么能是正义呢？</strong></p>
<p>   <strong>我们每一个人都有义务去完善和监督我们的共同契约。如果有人违背契约是对集体的背叛，而对违背契约的纵容同样是对集体的背叛。我们应该愤怒的，是我们的契约不够公平不够有力不够完善，是背叛契约的人依然逍遥法外，是我们没有让契约变成真正的底线。</strong></p>
<p>   <strong>我们应当建立起更加完善的契约关系来约束和保护每一个人。</strong></p>
]]></content>
      
        <categories>
            
            <category> 观点 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 社会 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日记一则]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older/diary-2019-07-25.html</url>
      <content type="html"><![CDATA[<p>迷茫是既有的情绪。日日习得新的警句也无以明志，所求连自己也不清楚的情况下，无论行何事总难离悖论。</p>
<span id="more"></span>

<p>像是人生的断语。恰巧能有所成的都未付什么功夫，稍加努力便无悬念地失败，实在令人唏嘘不已。愈行愈茫茫。做事向来也是经不起计划的，认真勾勒的文章读起来便如嚼蜡一般，任性而为倒尚存半分新意；前程向来于不着眼处闪亮，凡用功处则必定寒风凛冽，峭壁俨然。即知是手牌和出法的不相宜，却难免更加养成不努力的陋习。</p>
<p>不忍三迁到底算是弱点。欲以芝兰终究是妄念。所见人事虽多，但实在迷茫得很。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 有关迷茫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日记 20180618]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older/diary-0618.html</url>
      <content type="html"><![CDATA[<p>  &nbsp;&nbsp;&nbsp;&nbsp;近年来写文章十分受困， 一到抒情或者记事就觉得备受约束，然后几句话就匆匆结束了。</p>
<p>  &nbsp;&nbsp;&nbsp;&nbsp;以后还是要多写一些流水账和抒情。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[百度搜索内常用到的SEO算法总结]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older-seo-baidu-algorithm-summary.html</url>
      <content type="html"><![CDATA[<p>​	简单介绍一下这几天看的百度常用到的SEO算法，如惊雷算法、清风算法、飓风算法、信风算法等。</p>
<span id="more"></span>


<h1 id="惊雷算法"><a href="#惊雷算法" class="headerlink" title="惊雷算法"></a>惊雷算法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​	主要针对通过搜索引擎漏洞快速提升排名的行为。</p>
<h2 id="惊雷-1-0"><a href="#惊雷-1-0" class="headerlink" title="惊雷 1.0"></a>惊雷 1.0</h2><ol>
<li><p>针对点击流量作弊行为</p>
</li>
<li><p>一周内就可以检测到</p>
</li>
<li><p>惩罚周期一般为三个月，严重者长期封禁</p>
</li>
</ol>
<h2 id="惊雷-2-0"><a href="#惊雷-2-0" class="headerlink" title="惊雷 2.0"></a>惊雷 2.0</h2><ol>
<li><p>恶意制造作弊超链</p>
</li>
<li><p>恶意刷点击</p>
</li>
<li><p>惩罚：限制搜索展现，清洗作弊链接。清洗点击，记录作弊行为历史，严重者永久封禁</p>
</li>
</ol>
<h1 id="清风算法"><a href="#清风算法" class="headerlink" title="清风算法"></a>清风算法</h1><h2 id="清风1-0"><a href="#清风1-0" class="headerlink" title="清风1.0"></a>清风1.0</h2><p>​	目的是打击通过作弊标题欺骗用户点击的网站</p>
<ol>
<li><p>标题作弊：标题内容虚假，故意堆叠关键词</p>
</li>
<li><p>标题内容虚假：标题表述的内容与网页内容不符，有欺骗用户的嫌疑</p>
</li>
<li><p>在标题中多次重复，过度堆叠关键词</p>
</li>
</ol>
<h2 id="清风-2-0"><a href="#清风-2-0" class="headerlink" title="清风 2.0"></a>清风 2.0</h2><ol>
<li><p>解决欺骗下载的问题</p>
</li>
<li><p>实际下载资源与需求不符的（如提出是小说下载，但下载下来实际为app）</p>
</li>
<li><p>提供了下载资源，实际站点无下载链接（如下载链接点击后提示暂无资源或直接跳转到其他站点）</p>
</li>
</ol>
<h1 id="飓风算法"><a href="#飓风算法" class="headerlink" title="飓风算法"></a>飓风算法</h1><h2 id="飓风-1-0"><a href="#飓风-1-0" class="headerlink" title="飓风 1.0"></a>飓风 1.0</h2><p>​	打击以恶劣采集为主要内容来源的网站，同时从索引库中彻底清除恶劣采集链接，给优质原创内容更提供更多展示机会，促进搜索生态良性发展</p>
<h2 id="飓风-2-0"><a href="#飓风-2-0" class="headerlink" title="飓风 2.0"></a>飓风 2.0</h2><ol>
<li><p>针对存在大量从其他站点或公众号等内容生产方采集&#x2F;搬运而来的内容，信息未经整合，排版混乱，文章可读性差，有明显采集痕迹，对用户无任何增益价值</p>
</li>
<li><p>针对存在多段文章拼接的内容，文章逻辑性差，无法满足用户需求，阅读体验差</p>
</li>
<li><p>正对站点存在大量采集内容，网站自身的内容生产力差</p>
</li>
<li><p>正对站点存在大量与本站主题无关采集内容，领域专注度差，恶意获取流量，如：科技网站采集大量娱乐八卦，社会新闻等情况。</p>
</li>
</ol>
<h1 id="信风算法"><a href="#信风算法" class="headerlink" title="信风算法"></a>信风算法</h1><p>针对通过翻页键诱导进入其他频道（以及目录页、广告业等）的网站。</p>
<h2 id="百度建议"><a href="#百度建议" class="headerlink" title="百度建议"></a>百度建议</h2><ol>
<li><p>不要放置虚假翻页键。如果您希望能获得更多的用户浏览和点击，可以在正文结束后，为用户推荐相关的优质内容，吸引用户点击。</p>
</li>
<li><p>尊重用户浏览体验，避免出现刻意拆分一篇简短文章为多个分页的行为。</p>
</li>
</ol>
<h1 id="细雨算法"><a href="#细雨算法" class="headerlink" title="细雨算法"></a>细雨算法</h1><p>目的是保证搜索用户体验和促进黄页类B2B站点生态健康发展。与清风部分类似，主要打击标题作弊，包含<strong>title关键词堆砌、恶劣穿插联系方式、冒充官网</strong>等情况。</p>
<ol>
<li>页面标题作弊，包含冒充官网，title堆砌关键词等情况；（更多针对冒充官网等的情况）</li>
<li>商家为了在页面中频繁保留联系方式而做出的各种低质受益行为，如受益方式变形、穿插受益等；</li>
</ol>
<h2 id="标题误导"><a href="#标题误导" class="headerlink" title="标题误导"></a>标题误导</h2><ol>
<li>非公司官网，title中包含“官网”字样，让用户误以为是官网；</li>
<li>页面title中堆砌相近关键词；</li>
<li>页面title中穿插火星文字或者特殊符号，影响正常阅读；</li>
<li>页面title中穿插受益方式。</li>
</ol>
<h2 id="正文内容问题"><a href="#正文内容问题" class="headerlink" title="正文内容问题"></a>正文内容问题</h2><ol>
<li>正文内容不完整，频繁穿插变形的受益方式。（如汉字和符号代替数字表示手机号等等）</li>
<li>文章的配图图片中存在受益联系方式。</li>
<li>正文中商品或者服务信息内容为乱采集、拼接而成、排版混乱、用户从页面中无法获得商品或者服务信息。</li>
</ol>
<h1 id="烽火算法"><a href="#烽火算法" class="headerlink" title="烽火算法"></a>烽火算法</h1><p>针对危害用户隐私、恶意劫持站点的行为。</p>
<h2 id="打击对象"><a href="#打击对象" class="headerlink" title="打击对象"></a>打击对象</h2><ol>
<li>未经用户允许恶意窃取用户手机号码等隐私数据的行为。</li>
<li>恶意劫持百度流量的行为： <ol>
<li>搜索用户通过百度移动搜索到达网站后，完成阅读要离开网站页面时，通过浏览器返回上一级页面被劫持到虚假的百度搜索结果页中；</li>
<li>搜索用户通过百度移动搜索到达网站后，完成阅读要离开网站页面时，通过浏览器始终无法返回上一级百度搜索结果页，搜索用户会一直被困在站点内。</li>
</ol>
</li>
</ol>
<h2 id="惩罚方式"><a href="#惩罚方式" class="headerlink" title="惩罚方式"></a>惩罚方式</h2><p>永久封禁站点</p>
<h1 id="石榴算法"><a href="#石榴算法" class="headerlink" title="石榴算法"></a>石榴算法</h1><p>旨在打击含有大量妨碍用户正常浏览的恶劣广告的页面，尤其是弹出大量低质广告、存在混淆页面主体内容的垃圾广告的页面。</p>
<p><img src="https://zhanzhang.bj.bcebos.com/files/043651418724749.png" alt="低质网页"></p>
<h2 id="处罚"><a href="#处罚" class="headerlink" title="处罚"></a>处罚</h2><p>降低权重</p>
<h1 id="绿萝算法"><a href="#绿萝算法" class="headerlink" title="绿萝算法"></a>绿萝算法</h1><p>针对外链作弊的情况。</p>
<h2 id="绿萝-1-0"><a href="#绿萝-1-0" class="headerlink" title="绿萝 1.0"></a>绿萝 1.0</h2><ol>
<li>花钱购买或出售可以提升所谓网站权重的链接；</li>
<li>通过创建大量的无价值网页或站点建立的交叉轮链；</li>
<li>使用程序机在web2.0等网站大量的群发指向您网站的链接；</li>
<li>通过扫描网站漏洞在高质量站点中加入隐藏链接；</li>
<li>不具推荐意义的交换链接等等</li>
</ol>
<h2 id="绿萝-2-0"><a href="#绿萝-2-0" class="headerlink" title="绿萝 2.0"></a>绿萝 2.0</h2><ol>
<li><p>针对软文交易平台，将被直接屏蔽；</p>
</li>
<li><p>针对软文发布站</p>
<p>将视不同程度而进行处理。例如一个新闻网站，存在发布软文的现象但情节不严重，该网站在搜索系统中将被降低评价；利用子域大量发布软文的，该子域将被直接屏蔽，并且清理出百度新闻源；更有甚者创建大量子域用于发布软文，此种情况整个主域将被屏蔽。</p>
</li>
<li><p>针对软文受益站</p>
<p>一个网站的外链中存在少量的软文外链，那么此时该外链将被过滤清除出权重计算体系，该受益站点将被观察一段时间后视情况而进一步处理；一个网站的外链中存在大量的软文外链，那么此时该受益站点将被降低评价或直接屏蔽。</p>
</li>
</ol>
<h1 id="冰桶算法"><a href="#冰桶算法" class="headerlink" title="冰桶算法"></a>冰桶算法</h1><p>针对强行弹窗app下载、用户登录、大面积广告等影响用户正常浏览体验的页面，尤其以必须下载app才能正常使用的站点为代表；对用户可直接使用的优质资源进行优先展现。相应的必须下载app、必须登录等才可正常使用的资源排序会大幅下降。</p>
<h2 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h2><p>用户可直接使用的优质资源进行优先展现，相应的必须下载app、必须登录等才可正常使用的资源，其排序会大幅下降。</p>
<h2 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h2><p>针对全屏下载、在狭小的手机页面布设大面积广告遮挡主体内容（类似APP启动页广告）、强制用户登录才可以使用等问题。</p>
<h2 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h2><p>打击在百度移动搜索中，打断用户完整搜索路径的调起行为。</p>
<h2 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h2><p>针对移动搜索结果页广告过多，影响用户体验的页面，进行策略调整。</p>
<h2 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h2><p>针对发布恶劣诱导类广告的页面进行打击，降低其在百度搜索系统中的评价。</p>
<h3 id="恶劣广告（包括但不限于）"><a href="#恶劣广告（包括但不限于）" class="headerlink" title="恶劣广告（包括但不限于）"></a>恶劣广告（包括但不限于）</h3><ol>
<li>色情导航类</li>
<li>色情动图类</li>
<li>露骨文字链类</li>
<li>非法博彩类</li>
</ol>
<h2 id="5-0"><a href="#5-0" class="headerlink" title="5.0"></a>5.0</h2><p>针对落地页广告、APP调起、展开全文功能等问题，处理方式为违规内容过滤或限制搜索展现。</p>
<h1 id="天网算法"><a href="#天网算法" class="headerlink" title="天网算法"></a>天网算法</h1><p>针对部分站点存在盗取用户隐私的行为进行严打，主要表现为网页嵌恶意代码（多为JS代码），用于盗取QQ号、手机号等。</p>
<h1 id="蓝天算法"><a href="#蓝天算法" class="headerlink" title="蓝天算法"></a>蓝天算法</h1><p>针对新闻源站点售卖软文、目录等严重违反新闻源SEO优化算法规则，并影响用户关键词搜索体验行为。</p>
<p>处罚：清理出新闻源，降低搜索权重。</p>
<h1 id="闪电算法"><a href="#闪电算法" class="headerlink" title="闪电算法"></a>闪电算法</h1><p>移动搜索页面首屏加载时间将影响搜索排名。移动网页首屏在<strong>2秒之内</strong>完成打开的，在移动搜索下将获得提升页面评价优待，获得<strong>流量倾斜</strong>；同时，在移动搜索页面首屏加载非常慢（<strong>3秒及以上</strong>）的网页将会被<strong>打压</strong>。</p>
<h1 id="极光算法"><a href="#极光算法" class="headerlink" title="极光算法"></a>极光算法</h1><p>打击电脑端和移动端一些网站落地页面时间标注不清楚、或者页面无时间，又或者随意更改网站页面更新时间，误导用户类型的网站。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>落地页时间规范、时效性高的网站页面给予更多的收录和排名展现机会。</li>
<li>不符合百度搜索引擎极光算法的网站落地页面，将减少展现。</li>
</ol>
<h2 id="时间因子"><a href="#时间因子" class="headerlink" title="时间因子"></a>时间因子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/ld+json&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="string">&quot;@context&quot;</span>: <span class="string">&quot;https://ziyuan.baidu.com/contexts/cambrian.jsonld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="string">&quot;@id&quot;</span>: <span class="string">&quot;https://www.example.com/******&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;1561475044493981&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="string">&quot;title&quot;</span>: <span class="string">&quot;页面标题******&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="string">&quot;images&quot;</span>: [</span></span><br><span class="line"><span class="language-javascript">               <span class="string">&quot;https://www.example.com/***/pic1.png&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="string">&quot;https://www.example.com/***/pic2.png&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="string">&quot;https://www.example.com/***/pic3.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">           ], <span class="comment">//请在此处添加希望在搜索结果中展示图片的url，可以添加1个或3个url</span></span></span><br><span class="line"><span class="language-javascript">           <span class="string">&quot;pubDate&quot;</span>: <span class="string">&quot;2017-06-15T08:00:01&quot;</span> <span class="comment">// 需按照yyyy-mm-ddThh:mm:ss格式编写时间，字母T不能省去</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字段命名"><a href="#字段命名" class="headerlink" title="字段命名"></a>字段命名</h2><table>
<thead>
<tr>
<th>字段命名</th>
<th>字段说明</th>
<th>字段格式</th>
</tr>
</thead>
<tbody><tr>
<td>pubdate</td>
<td>内容发布时间</td>
<td>YYYY-MM-DDThh:mm:ss的日期时间（请注意日期与时间之前以“T”分隔）</td>
</tr>
<tr>
<td>update</td>
<td>内容更新时间 1）如内容为首次创建，请填写与pubdate相同的时间； 2）如页面是问答、论坛类，请填写用户可看到的第一个回答对应的时间</td>
<td>同上</td>
</tr>
<tr>
<td>lrDate</td>
<td>最新回复时间 1）如页面是问答、论坛类且有回复信息，请在此字段填写最新一条回复对应的时间</td>
<td>同上</td>
</tr>
</tbody></table>
<h1 id="参考站点"><a href="#参考站点" class="headerlink" title="参考站点"></a>参考站点</h1><ul>
<li><a href="https://www.seoyh.net/">一点优化</a></li>
<li><a href="https://zhaoyangang.cn/">赵彦刚博客</a></li>
<li><a href="http://www.xusseo.com/">徐三seo</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于包袱的若干反思]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older/introspection-about-burden.html</url>
      <content type="html"><![CDATA[<p>​	人只有在极有事和极无事的状态里才能不忘反思。然而极有事的处境中人往往难以获得能将反思记录下来的时间，因此极闲有时也不是全然无益的。</p>
<span id="more"></span>

<p>​	我现在就极其地闲。倒不是因为我真的没有事情要做，实在是无<strong>可以做</strong>的事情。出于极其不可理喻的原因，我想做和需要做的事情现在都不能做。我感到我的生命在此刻遭受了极大的浪费。</p>
<p>​	不知从什么时候起，我的内心背上了极重的包袱。大概就是觉得做很多事会有悖于外在的期望，然而在内心又十分渴望或是认同这些事是有价值的，这种生存的状态我称之为<strong>包袱叠加态</strong>。</p>
<p>​	包袱叠加态是一种十分危险的状态。处于包袱叠加态的人们宁愿浪费时间做自己认为毫无意义的事也不愿真正地把时间效用最大化，因此会极大地降低人生的有效容量；包袱叠加态的人们能够从包袱中求出无效活动的公约数，并进而得到更多有相同因子的无效活动，比如从浪费时间这一公约数出发，就能够找到许多尽管与包袱无关但能够更加高效地浪费时间的活动，这一过程可以称之为包袱倍增。而发生包袱倍增的人们在达到某一个限度时会开始明显意识到包袱倍增对于人生内部质量的显著作用，从而进行自我调整，这一自我调整过程称为包袱相变，所到达的这一限度称为包袱极限。然而相变的结果却是不那么确定的。并不是每一个人都能认识到包袱倍增的有害性，一些人会在达到包袱极限后通过丢弃一些包袱来离开包袱极限；而另一些人则会通过调整自我认知来使得包袱极限向右移动。前者可以称为包袱坍缩，后者可以称为包袱跃迁。通常而言，人们会一边发生包袱坍缩，一边发生更剧烈的包袱跃迁，然而未能自知。</p>
<p>​	作为一切社会关系的总和，人们天然地与包袱相叠加。人们所追求的东西有很大一部分存在于包袱之中，因而不能接受丢掉包袱。而不丢掉就难免在看似自主的事情上也往往带着包袱而动。比如写东西总会考虑到写得太差会显得自己很蠢。比如因为觉得谈人生会显得不懂得人生，学基础会显得基础太差而不谈和不学。包袱叠加的利害很难得知，但是处于包袱倍增中的人生总是虚幻和沉重的。</p>
<p>​	作为一篇日记而无法不带着包袱讲话，便只能讲出来上面这几段屁话。然而我所要写的既不在此亦在此。总之，任何一次包袱跃迁都是危害不小的事情，应当极力避免。</p>
<p>​	</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 人生的经验 </tag>
            
            <tag> 反思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次自动测试失败之后的 debug]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older-something-about-debug-when-maven-hang.html</url>
      <content type="html"><![CDATA[<p>  在<code>gitlab-CI</code>中使用<code>maven test</code>遭遇了一次神奇的阻塞以后我进行了漫长的debug过程。</p>
<span id="more"></span>

<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>项目使用jdk8和maven3进行构建，测试基于jacoco内置的surefire插件，jacoco为0.7.9版本，surefire为2.2.0版本。在本地正常运行的自动测试在提交给<code>gitlab-runner</code>以后会在运行到某一个测试用例中陷入无穷等待。</p>
<p><code>gitlab-runner</code>版本为11.5，使用的docker版本为18.0，运行与阿里云ECS上（8U 16G）。</p>
<h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><p>最后发现是起因是小伙伴在一个频繁调用的随机数生成中引入了SecureRandom，由于SecureRandom的随机种子依赖于操作系统提供的随机数据（在大部分linux系统中基于输入设备产生的熵池提供），而VPS（虚拟服务器）上输入设备非常少，在默认的阻塞方式中会导致整个过程陷入漫长的阻塞…解决就是在随机数不需要安全性的地方使用普通的random，然后在jvm的启动参数中添加<code>-Djava.security.egd=file:/dev/./urandom</code>，启用非阻塞式的随机数据获取。</p>
<h1 id="问题发现过程"><a href="#问题发现过程" class="headerlink" title="问题发现过程"></a>问题发现过程</h1><h2 id="猜想1-操作系统"><a href="#猜想1-操作系统" class="headerlink" title="猜想1 操作系统"></a>猜想1 操作系统</h2><h3 id="猜想与假设"><a href="#猜想与假设" class="headerlink" title="猜想与假设"></a>猜想与假设</h3><p>本地windows环境下运行正常，而测试镜像基于linux构建（<code>maven:3-jdk-8</code>），有概率是因为操作系统的差异导致了行为的区别（事实证明确实是这样，但是也不完全是）。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>windows本地通过相同docker镜像进行构建，完全正常。</p>
<h2 id="猜想2-gitlab-runner环境差异"><a href="#猜想2-gitlab-runner环境差异" class="headerlink" title="猜想2 gitlab-runner环境差异"></a>猜想2 <code>gitlab-runner</code>环境差异</h2><h3 id="猜想与假设-1"><a href="#猜想与假设-1" class="headerlink" title="猜想与假设"></a>猜想与假设</h3><p>好吧其实我是看见Stack Overflow上的老哥说jacoco内置的surefire插件默认的fork行为在<code>gitlab-runner</code>中会导致阻塞，看起来合情合理</p>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>显式地声明surefire插件，把jacoco和surefire全都升到最新版，然后配置forkCount:1,forkReuse:never.: 我又双叒叕失败了</p>
<p>我甚至还尝试了把<code>threadCount</code>限制到1，把tomcat的启动线程数调低，全都没用。。。</p>
<h2 id="猜想3-硬件资源"><a href="#猜想3-硬件资源" class="headerlink" title="猜想3 硬件资源"></a>猜想3 硬件资源</h2><h3 id="猜想与假设-2"><a href="#猜想与假设-2" class="headerlink" title="猜想与假设"></a>猜想与假设</h3><p>自动构建的docker容器通过<code>gitlab-runner</code>启动， 而<code>gitlab-runner</code>的默认启动参数未知，有概率是由于docker中提供的资源不足导致运行无法正常运行。</p>
<h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><ol>
<li>在服务器上手动通过<code>docker</code>完成测试，同样阻塞（证明非启动参数差异，同时也不是<code>gitlab-runner</code>的锅）</li>
<li>在服务器上通过直接调用<code>maven</code>进行测试，同样阻塞（证明完全不是docker的问题）<br>（到这里，我发现我本地的jdk是12版本, 又通过在服务器12版本的镜像进行构建，依然异常，已经有很大概率证明是硬件资源问题了。（确实是这样，但是我依然没想到是输入设备））</li>
<li>猜想问题在于服务器资源不足（我甚至以为是阿里云太坑），不能够提供足够的资源完成测试（naive!），于是在本地的linux下进行测试，确认能够正常运行（好像已经破案了？）</li>
<li>于是在另一台鹅家的服务器上进行测试：1 硬件资源充足 2 基本没在用。全套跑一遍，依然失败</li>
<li>通过<code>jconsole</code>监控服务器上运行的构建，发现无死锁，而阻塞时线程数内存占用和CPU占用都没在峰值</li>
</ol>
<p>这个测试像是真的在睡觉。。。</p>
<h2 id="猜想4-代码的锅"><a href="#猜想4-代码的锅" class="headerlink" title="猜想4 代码的锅"></a>猜想4 代码的锅</h2><h3 id="猜想与假设-3"><a href="#猜想与假设-3" class="headerlink" title="猜想与假设"></a>猜想与假设</h3><p>只剩下这么想了</p>
<h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><p>没辙了，二分查错吧。debug技能极差，服务器环境下只会用log了…</p>
<p>然后发现是在一个<code>random.nextInt</code>那里卡住了。<br>？？？全程黑人问号脸，然后终于发现这不是一个一般的random</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以后有问题还是先看代码吧。。。浪费了一天多的时间 好想哭QAQ</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>学会了通过jconsole来进行监控，方法是在jvm的启动参数中加入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Djava.rmi.server.hostname=xxx.xxx.xxx.xxx \ </span><br><span class="line">-Dcom.sun.management.jmxremote.port=8999 \ </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false \ </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false</span><br></pre></td></tr></table></figure>

<p>然后就可以通过在本地运行jconsole(jdk&#x2F;bin目录下)来监控运行情况啦， 地址<code>xxx.xxx.xxx.xxx:8999</code> 这样就好。</p>
<h2 id="Further-Reading"><a href="#Further-Reading" class="headerlink" title="Further Reading"></a>Further Reading</h2><p><a href="http://hongjiang.info/java8-nativeprng-blocking/">再谈随机数引起的阻塞问题</a><br><a href="https://www.jianshu.com/p/de2df2d92d92">CentOS 7 下Tomcat启动超慢的原因及解决方案</a><br><a href="http://hongjiang.info/jvm-random-and-entropy-source/">JVM上的随机数与熵池策略</a><br><a href="https://tersesystems.com/blog/2015/12/17/the-right-way-to-use-securerandom/">The Right Way to Use SecureRandom</a></p>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CI </tag>
            
            <tag> MAVEN </tag>
            
            <tag> debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot 禁用web server]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older-spring-boot-disable-web.html</url>
      <content type="html"><![CDATA[<p><code>spring boot</code>项目做拆分以后，一部分应用不再需要提供http服务，记录一下禁用web的方式。</p>
<span id="more"></span>

<p>一行配置：<code>spring.main.web-environment=false</code></p>
<p>或者在启动类中，加入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>()</span><br><span class="line">                .sources(SpringBootDisableWebEnvironmentApplication.class)</span><br><span class="line">                .web(<span class="literal">false</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        springApplication.run(args);</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringBootDisableWebEnvironmentApplication.run(SpringBootDisableWebEnvironmentApplication.class, args); <span class="comment">//取代 SpringApplication.run(SpringApplication.class, args)</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker 安装的 gitlab 修改配置/重置密码等]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older-gitlab-docker-compose-rails-console.html</url>
      <content type="html"><![CDATA[<p>简单记录一下</p>
<span id="more"></span>

<h2 id="rails-console-进入方法"><a href="#rails-console-进入方法" class="headerlink" title="rails console 进入方法"></a>rails console 进入方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it GITLAB_CONTAINER_ID /bin/bash</span><br><span class="line">su - git</span><br><span class="line">cd gitlab</span><br><span class="line">bundle exec rails c production</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec --user git gitlab bundle exec rails c production</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span> --user git -it GITLAB_CONTAINER_ID bundle <span class="built_in">exec</span> rails c production</span></span><br></pre></td></tr></table></figure>


<h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><p>先进入rails console，然后</p>
<figure class="highlight ruby"><figcaption><span>on rails</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user = <span class="title class_">User</span>.where(<span class="symbol">id:</span> <span class="number">1</span>).first</span><br><span class="line">user.password = <span class="string">&#x27;NEW_PASS&#x27;</span></span><br><span class="line">user.password_confirmation = <span class="string">&#x27;NEW_PASS&#x27;</span></span><br><span class="line">user.save</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="其他配置（如备份等）"><a href="#其他配置（如备份等）" class="headerlink" title="其他配置（如备份等）"></a>其他配置（如备份等）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec --user git gitlab bundle exec rake RAKE_TASK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eg: docker-compose <span class="built_in">exec</span> --user git gitlab bundle <span class="built_in">exec</span> rake gitlab:backup:create RAILS_ENV=production</span></span><br></pre></td></tr></table></figure>


<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/sameersbn/docker-gitlab">docker-gitLab</a><br><a href="https://docs.gitlab.com/ee/raketasks/README.html#rake-tasks"></a></p>
]]></content>
      
        <categories>
            
            <category> SRE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> 配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 WSL 中安装 Arch Linux]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older-replace-ubuntu-with-arch-on-wsl.html</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="https://wiki.archlinux.org/index.php/Install_on_WSL_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">官方教程</a></p>
</li>
<li><p>补充： <a href="https://github.com/yuk7/arch-prebuilt">预编译的fakeroot-tcp包</a></p>
</li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 <a href="https://www.microsoft.com/en-us/store/p/ubuntu/9nblggh4msv6">Windows 应用商店</a> 安装 Ubuntu。</p>
<p>确保默认用户为 root:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu config --default-user root</span><br></pre></td></tr></table></figure>
<p>从开始菜单打开 Ubuntu。</p>
<p>从 <a href="https://www.archlinux.org/download/">Arch Linux Downloads</a> 下载 Arch bootstrap .tar.gz 然后解压：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -zxvf /mnt/c/Users/username/Downloads/archlinux-bootstrap-2017.06.01-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure>
<p>在<code>~/root.x86_64/etc/pacman.d/mirrorlist</code>文件中，选择需要的服务器，取消注释。</p>
<p>让 WSL 自动生成 &#x2F;etc&#x2F;resolv.conf：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;# This file was automatically generated by WSL. To stop automatic generation of this file, remove this line.&quot;</span> &gt; ~/root.x86_64/etc/resolv.conf</span></span><br></pre></td></tr></table></figure>
<p>退出所有打开的 Bash 命令行窗口。</p>
<p>在 Windows 资源管理器中打开 %localappdata%\Packages，并找到 CanonicalGroupLimited.UbuntuonWindows_* （其中， * 表示随机字符串 ）。在 %localappdata%\Packages\CanonicalGroupLimited.UbuntuonWindows_*\LocalState\rootfs 中删除 bin, etc, lib, lib64, sbin, usr and var.</p>
<p>然后从rootfs\root\root.x86_64移动(不要复制)相同的文件到 rootfs</p>
<p>使用一台 Linux 电脑构建 <a href="https://aur.archlinux.org/packages/fakeroot-tcp/">fakeroot-tcp</a>, 然后复制到 Windows 电脑。在 System V IPC 被完全实现之前 fakeroot-tcp 都是必需的。 (<a href="https://github.com/Microsoft/BashOnWindows/issues/2465">详情请见</a>)。</p>
<p>github上有预编译的pkg文件，可以直接使用： <a href="https://github.com/yuk7/arch-prebuilt">预编译的fakeroot-tcp包</a></p>
<p>(x86_64的1.23版本直接下载： <a href="https://github.com/yuk7/arch-prebuilt/releases/download/18082100/fakeroot-tcp-1.23-1-x86_64.pkg.tar.xz">fakeroot-tcp-1.22-1-x86_64.pkg.tar.xz</a>)</p>
<p>再次打开Bash，开始安装Arch：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate archlinux</span><br><span class="line">pacman -U /mnt/c/Users/username/Downloads/fakeroot-tcp-1.21-2-x86_64.pkg.tar.xz</span><br><span class="line">pacman -Syyu base base-devel</span><br></pre></td></tr></table></figure>
<p>注意在base中取消<code>fake-root</code>的安装（与<code>fake-root-tcp有冲突</code>，wsl不支持fakeroot，因此需要用fakeroot-tcp替代）</p>
<h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><p>设置用户 (不需要和 Windows 用户名相同)：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash username</span><br><span class="line">passwd root</span><br><span class="line">passwd username</span><br></pre></td></tr></table></figure>
<p>设置此用户为默认用户</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu config --default-user username</span><br></pre></td></tr></table></figure>

<p>完成以后还需要进行locale的设置，编辑<code>/etc/locale.gen</code>文件，取消注释需要的语言(如zh_CN.UTF-8 UTF-8)，然后执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="https://github.com/DDoSolitary/LxRunOffline">LxRunOffline</a> 对安装提供了更加优雅的方式，可以不通过替换rootfs的方式来进行arch的安装，限于篇幅不做介绍。</p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://davidtw.co/writings/2017/archlinux-on-the-windows-subsystem-for-linux">ArchLinux on the Windows Subsystem for Linux</a></p>
<p><a href="https://www.cnblogs.com/wurui1994/p/7839777.html">安装Manjaro</a></p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wsl </tag>
            
            <tag> arch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 ubuntu 上编译安装 pacman]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older-build-pacman-on-ubuntu.html</url>
      <content type="html"><![CDATA[<p>为了编译一个arch的包，迫不得已需要在现有的机器上安装pacman，具体的编译过程如下：</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libarchive-dev bsdtar</span><br><span class="line"></span><br><span class="line">git clone git://projects.archlinux.org/pacman.git</span><br><span class="line">git checkout e6f72c61</span><br><span class="line"></span><br><span class="line">cd pacman</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --disable-doc</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>其中可能会遇到一些依赖缺少，比如<code>gettext</code>, <code>automake</code>, <code>autopoint</code>, <code>libcurl4-openssl-dev</code>, <code>libarchive-dev</code>, <code>bsdtar</code>，依赖补全以后重新configure即可。</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【备忘】shell比较好用的快捷键]]></title>
      <url>http://www.aak1247.cn/blogs/2019/older/shell-keys.html</url>
      <content type="html"><![CDATA[<p>过一段时间就得找一次。。。备忘</p>
<span id="more"></span>

<h2 id="比较好用的"><a href="#比较好用的" class="headerlink" title="比较好用的"></a>比较好用的</h2><p><code>Ctrl + k</code> - 清除从光标到行尾的部分</p>
<p><code>Ctrl + u</code> - 清除从光标到行首的部分</p>
<p><code>Alt + t</code> - 交换当前所处位置单词和光标前一个单词</p>
<p><code>Alt + d</code> - 删除光标所在位置后的单词</p>
<p><del><code>Ctrl + w</code> - 删除光标所在位置前的单词</del></p>
<p><code>Alt + a</code> - 将光标移到当前单词头部</p>
<p><code>Alt + e</code> - 将光标移到当前单词尾部</p>
<p><code>Ctrl + ←</code> - 光标移动到前一个单词开头</p>
<p><code>Ctrl + →</code> - 光标移动到后一个单词结尾</p>
<p><code>Ctrl + y</code> - 插入最近删除的单词</p>
<p><code>Alt + b</code> - 光标前移一个单词</p>
<p><code>Alt + f</code> - 光标后移一个单词</p>
<h2 id="一般好用的"><a href="#一般好用的" class="headerlink" title="一般好用的"></a>一般好用的</h2><blockquote>
<p><code>Ctrl + h</code> - 删除光标前一个字符</p>
<p><code>Ctrl + f</code> - 光标后移一个字符</p>
<p><code>Ctrl + b</code> - 光标前移一个字符</p>
<p><code>Ctrl + t</code> - 交换光标前两个字符</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[双十一集赞游戏、博弈论及其他]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older-about-taobao-zan-game.html</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1540678898993&di=8535effdaf4e654a8244a87f6f01c127&imgtype=0&src=http://img.zcool.cn/community/01b0aa5982baf9a8012156035b2546.jpg" alt="双十一"></p>
<p>比起往年的双十一，商家参与的热情稍微消退了一些。但是淘宝2018年的双十一游戏却十分有趣，比起传统的运气类游戏，这种包含合作和对抗的PvP游戏有非常多可说之处。</p>
<span id="more"></span>

<h1 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h1><p>游戏持续约20天，每一天为独立的一局比赛，每局比赛根据当前的积分（能量值）进入不同等级的场次随机匹配对手进行PK。PK的规则为获取更多赞的队伍获胜。</p>
<p>每一局比赛开局收取一定量的积分(能量值)作为入场费，获胜的奖励积分(能量值)约３倍于开局收取积分。若PK双方赞数不等，赞高者获取全部奖励，赞低者无奖励；若赞数相等，双方平分奖励。</p>
<p>此外，每个用户每天为他人点赞上限为６次，每只队伍只能点赞一次。（忽略超级会员）</p>
<p>游戏提供了非常有限的交流功能，双方可以通过修改队名向对方传达简单的文字消息。</p>
<h1 id="游戏者间关系"><a href="#游戏者间关系" class="headerlink" title="游戏者间关系"></a>游戏者间关系</h1><p>集赞游戏的游戏者分为队友和对方选手。队友之间的关系主要为合作；PK双方的关系主要为竞争，不同队伍的玩家之间为合作关系(未进行PK)。</p>
<h1 id="囚徒困境"><a href="#囚徒困境" class="headerlink" title="囚徒困境"></a>囚徒困境</h1><h2 id="对局双方"><a href="#对局双方" class="headerlink" title="对局双方"></a>对局双方</h2><p>每一局游戏存在一个近似的囚徒困境。</p>
<p>从收益来说，每一局游戏游戏者的总收益是固定的，可以等效为一个零和博弈。但是成本是可变的，最低的成本为双方均不参与集赞，此时成本为0，而双方都能获得大于0的收益（奖励减去入场费）。但是由于游戏双方能够进行交流的途径只有简单的队名，无法建立实质性的协议（无法惩罚“不合作”行为），所以这个理论上的纳什平衡是不可达到的。</p>
<p>由于无法建立有效的合作，PK双方的关系就由合作转为竞争关系。对于一方的游戏者来说，最终成本最低的获胜方式为仅高于对方一赞，但是显然这样的平衡是不稳定的，理想的决策取决于游戏者对于短时间难以追上的认知，一旦达到这一条件，游戏就会暂时趋于稳定，直到另一方缩小这一差距或超过。从双方的游戏的过程来看，这是一个不完全信息的动态博弈。</p>
<h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><p><strong>假设</strong>双方队伍游戏者人数相等，不同游戏者集赞能力，对于集赞的成本认知相当，时间成本相当。由于每一局游戏存在确定的结束时间(23点)，游戏者只需要取得<strong>最后</strong>一次博弈的胜利即可获得奖励，理论上合理的决策为预估集赞达到对方短时间难以追上需要的时间，在最后的这一段时间内完成集赞。这一决策需要考虑对方发觉当前游戏者集赞行为所需的时间 _t_。亦即，在对方发觉并完成集赞行为前就得达到目标赞数，然后双方以同等速率进行集赞直到结束时间。需要注意的是，由于集赞速率有限，游戏者需要保持当前赞数的差距能够在开始集赞到对方发觉的时间内追上并建立优势。</p>
<p>由于集赞行为开始到产生效果存在不短的时间，对对方发觉集赞行为所需的时间需要将其计算在内。</p>
<p>而对于另一方来说，一旦发觉对方的赞数无法在结束时间前超越，进行集赞行为的边际收益就降到了0，因此，此时合理的决策为放弃当前局比赛。可以看出，在这种决策下的集赞游戏存在一定的<strong>先动优势</strong>。</p>
<p>但对于过早建立先动优势的游戏者来说，一旦其优势地位建立而对方短时间内未打破当前的稳定状态，其发觉对方集赞行为所需的时间就会由于对于游戏的关注度减少而变长，另一方需要保持的最大差距就会变大，己方其实处于一定的风险之中。</p>
<h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><p>实际情况下，对局双方往往存在一定的集赞水平差异。由于不完全信息，双方为取得游戏的胜利需要对对方实力进行合理的试探以判断其集赞能力，另外在进行决策时需要对对方实力进行包含一定放大的估计。另一方面由于集赞速率随当前集赞数非线性变化的特点，对集赞能力进行预估存在一定的困难。且游戏双方往往存在不同的集赞能力上限，所以游戏的结果存在不确定性。但根据以上简单地分析来说，比较合理的决策，是在游戏开始后将差距维持在一定范围内，在游戏距结束较近时建立优势。</p>
<h2 id="同队游戏者"><a href="#同队游戏者" class="headerlink" title="同队游戏者"></a>同队游戏者</h2><p>同队游戏者的关系其实也可以视为一个囚徒困境的模型，但是由于接近完全信息、试图“合作”和“不合作”惩罚的存在，往往能够达到纳什平衡状态，游戏者之间为合作关系。</p>
<h2 id="其他队伍游戏者"><a href="#其他队伍游戏者" class="headerlink" title="其他队伍游戏者"></a>其他队伍游戏者</h2><p>不同队伍的游戏者可以通过互赞的方式增加彼此的赞数，与同队游戏者相似，这一过程也接近完全信息，存在试图“合作”和“不合作”惩罚双方为正和博弈，往往为合作关系。</p>
<h1 id="万元陷阱"><a href="#万元陷阱" class="headerlink" title="万元陷阱"></a>万元陷阱</h1><p>实际上，由于这个游戏中还有另一个典型模型：万元陷阱，最理想的决策并不一定是以上分析的结果。</p>
<blockquote>
<p>万元陷阱：拍卖一万元，起拍价100，每次递增为100，出价最高者可以拍得1000元，同时第二高的出价者需要支付其所出价金额。</p>
</blockquote>
<p>每一局游戏中，游戏双方通过不断增加赞数来获取游戏的胜利，每一个赞的获取都需要一定的成本，而最终获胜所需的赞越多成本就越高。但是增加成本并不会使得收益增加。相反，如果未取得最终的胜利，所有付出的成本都将白白付出。因此，为减少损失，努力获取游戏胜利又成为了一个看似合理的选择。</p>
<p>这一游戏过程中，存在以下特征：</p>
<ol>
<li>有明显的诱饵（积分奖励）</li>
<li>成本的付出是单向的，即便放弃比赛也不能减少成本</li>
<li>越想要获取胜利，可能需要付出的成本越大</li>
</ol>
<p>在游戏中，如果和对手在赞数上出现胶着，往往会出现甲超越乙，乙又很快超越甲的状态。随着游戏的继续，双方的沉没成本不断增加，双方都无法下定决心放弃游戏。而由于双方获取的赞数存在一个实际上的上限，最终会在一方无法获得足够的赞以超越对方时结束游戏。</p>
<p>可以看出，这种结果对于双方来说都是成本最大的，应当尽量避免。对于两个足够聪明的对局方来说，如果一方一开始就表明势在必得破釜沉舟的决心，游戏就会在此时结束。从这个角度来看，一个比较合理的决策是一开始就集到足够多的赞以“劝退”对方，让对方即时止损。（这个角度也是<strong>先动优势</strong>，但是明显存在一些差异）</p>
<p>在实际中，由于游戏者的水平不一，且对于止损的预期不同，一开始就集许多赞也并不能保证对方一定放弃。</p>
<p>另外，由于存在确定的结束时间，”劝退流”玩儿法可能的成本要高于仅追求最后一期游戏胜利的决策。</p>
<blockquote>
<p>经建议，分享到支付宝不用复制粘贴就可以点赞。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 观点 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 双十一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux ubuntu 下 mongodb 4.0 安装和配置远程连接]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older-mongodb-server-config.html</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>搬运： <a href="https://docs.mongodb.com/manual/administration/install-on-linux/">安装教程</a></p>
<p>选择对应版本，复制粘贴命令即可，这里就不涉及了。</p>
<span id="more"></span>

<p>安装完成后启动服务：<br><code>sudo service mongod start</code></p>
<p>如果提示<code>Unit mongod.service not found</code>，可以尝试以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable mongod</span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>以上命令无效，可以创建 <code>/lib/systemd/systemd/mongod.service</code> 文件，然后填入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">User=mongodb</span><br><span class="line">Group=mongodb</span><br><span class="line">EnvironmentFile=-/etc/default/mongod</span><br><span class="line">ExecStart=/usr/bin/mongod --config /etc/mongod.conf</span><br><span class="line">PIDFile=/var/run/mongodb/mongod.pid</span><br><span class="line"># file size</span><br><span class="line">LimitFSIZE=infinity</span><br><span class="line"># cpu time</span><br><span class="line">LimitCPU=infinity</span><br><span class="line"># virtual memory size</span><br><span class="line">LimitAS=infinity</span><br><span class="line"># open files</span><br><span class="line">LimitNOFILE=64000</span><br><span class="line"># processes/threads</span><br><span class="line">LimitNPROC=64000</span><br><span class="line"># locked memory</span><br><span class="line">LimitMEMLOCK=infinity</span><br><span class="line"># total threads (user+kernel)</span><br><span class="line">TasksMax=infinity</span><br><span class="line">TasksAccounting=false</span><br><span class="line"></span><br><span class="line"># Recommended limits for for mongod as specified in</span><br><span class="line"># http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>然后再输入前面两条命令激活服务。</p>
<p>服务启动完成后可以输入<code>sudo service mongod status</code>查看当前状态。</p>
<h1 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h1><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mongod.conf</span><br></pre></td></tr></table></figure>

<p>4.0的配置文件采用yaml格式, 设定也有所不同。这里将 <code>net.bindIp</code> 设为 <code>0.0.0.0</code>即可。</p>
<p><code>:x</code>退出，然后<code>sudo service mongod restart</code>重启服务即可。</p>
<h1 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h1><p>用户配置与之前版本无差异，使用<code>db.createUser()</code>创建用户即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">pwd</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">roles</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">role</span>: <span class="string">&quot;dbAdminAnyDatabase&quot;</span>,</span><br><span class="line">            <span class="attr">db</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="启用认证"><a href="#启用认证" class="headerlink" title="启用认证"></a>启用认证</h1><p>修改配置文件，添加：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure>

<p>然后重启服务。</p>
<p>测试登录：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017 -u admin -p admin --authenticationDatabase admin</span><br></pre></td></tr></table></figure>

<p>配置成功就可以正常进入mongo shell了。</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="数据不兼容"><a href="#数据不兼容" class="headerlink" title="数据不兼容"></a>数据不兼容</h2><p>从旧版本升级到<code>mongodb 4.0</code>可能会存在数据不兼容的问题，对应的服务错误码<code>exitCode=62/n/a</code>。可以先将现有数据导出，，然后进入&#x2F;var&#x2F;lib&#x2F;mongodb, 删除目录下文件。启动完成后再导入历史数据。</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">mongodump -u admin -p admin -d test -o data # -d制定要导出的数据库名称</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">......导出当前的所有库</span></span><br><span class="line">cd /var/lib/mongodb</span><br><span class="line">sudo rm ./* -r</span><br><span class="line">sudo service mongod start</span><br><span class="line">cd</span><br><span class="line">mongorestore -u admin -p admin --dir data</span><br></pre></td></tr></table></figure>

<p>admin库的导入导出可能存在问题，如果出现无法登录的问题，可以先关闭认证，然后<code>db.changeUserPassword(&quot;username&quot;, &quot;password&quot;)</code>修改为之前的密码，完成后再启用认证。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>更详细的配置： <a href="https://docs.mongodb.com/manual/reference/configuration-options/">配置</a></li>
<li>错误码定义： <a href="https://github.com/mongodb/mongo/blob/master/src/mongo/util/exit_code.h">错误码</a></li>
<li>备份和恢复： <a href="https://docs.mongodb.com/manual/tutorial/backup-and-restore-tools/">back up and restore tools</a></li>
<li>用户和角色管理: <a href="https://docs.mongodb.com/manual/tutorial/manage-users-and-roles/">Mange Users and Roles</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> SRE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[win10的优雅使用]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older-windows-startup-config.html</url>
      <content type="html"><![CDATA[<p><img src="http://qiniu.cdn.hive-intel.com/aak1247/ahk_wallpaper_reduced.jpg" alt="AutoHotKey"></p>
<p>长期使用 mac&#x2F;deepin 这样的系统以后再回windows会有非常大地不适应感，不够好在windows提供的灵活性使得它能够在应用层很容易具有其他系统的一些优雅特性，比如mac的全局搜索、热区、全局快捷键等。简单记录一下折腾windows的一些基本配置.</p>
<span id="more"></span>



<h1 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h1><h2 id="wox"><a href="#wox" class="headerlink" title="wox"></a>wox</h2><p><a href="http://www.wox.one/">wox</a>提供了类似于osx上Alfred&#x2F;聚焦搜索的功能，功能非常强大。 </p>
<p><img src="http://www.wox.one/images/wox_preview.jpg" alt="wox"></p>
<p>其他选项：<br> <a href="https://github.com/KELiON/cerebro">cerebro</a></p>
<h2 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h2><p><a href="http://cmder.net/">cmder</a>是一个windows下的命令行工具，具有一些linux终端、item具有的多标签、半透明、全局唤醒等等基本特性，另外针对windows环境下不统一的命令行环境还提供了丰富的可配置项，能够支持各种命令行，内置了<code>git bash</code>、<a href="#wsl"><code>wsl</code></a>, <code>powershell</code>, <code>cmd</code>等命令行的支持，支持自定义新的命令行环境。</p>
<p>可以参考<a href="/note-about-cmder.html">cmder的配置</a> (汗…还没填坑)</p>
<p>可以使用 wox 来定义全局的快捷键调用 cmder。</p>
<h2 id="AutoHotkey"><a href="#AutoHotkey" class="headerlink" title="AutoHotkey"></a>AutoHotkey</h2><p><a href="https://www.autohotkey.com/">AutoHotkey</a>是一个脚本工具，它可以通过鼠标和键盘事件来实现丰富的功能。一个比较简单的应用就是通过定时获取鼠标的位置来判定鼠标是否触及了屏幕边缘、角等，以此来实现一些任务，比如显示桌面、切换工作区、显示多任务窗口等等。</p>
<p><a href="https://github.com/aak1247/autoHotkeyConfig">config</a>一个能够实现鼠标移到屏幕边缘自动切换工作区、左上角显示多任务窗口等功能的脚本模板。</p>
<h2 id="chocolatey"><a href="#chocolatey" class="headerlink" title="chocolatey"></a>chocolatey</h2><p><a href="https://chocolatey.org/">chocolatey</a>是一个windows下的包管理器，基于powershell来实现，对于常用的软件尤其是编程中使用的工具支持已经非常好了。这是安装chocolatey的命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; <span class="built_in">iex</span> ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://chocolatey.org/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>需要用管理员权限打开powershell执行。</p>
<h1 id="功能篇"><a href="#功能篇" class="headerlink" title="功能篇"></a>功能篇</h1><h2 id="wsl"><a href="#wsl" class="headerlink" title="wsl"></a>wsl</h2><p>wsl 是 windows 下的 linux 子系统，基于 windows 系统 API 实现了一个 POSIX 的内核，所以虚拟化程度比起虚拟机要低得多，但是能提供更大的权限和灵活性，比如使用 linux 下的工具和软件来操作 windows 下的文件，比起虚拟机共享数据要方便得多，也能省去双系统切换系统的麻烦。</p>
<p>安装过程见<a href="http://aak1247.coding.me/linux-on-windows.html">启用Win10的Linux子系统</a>。</p>
<p>当然，缺点也是显而易见的，较低的虚拟化程度带来了安全性问题，有时候也会因为文件系统的差异（文件系统还是 ntfs ）而引起一些非常难以发现的 bug 。</p>
<h1 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>可以下载<a href="https://raw.githubusercontent.com/aak1247/shell-set-up/master/font/Meslo%20LG%20M%20Regular%20Nerd%20Font%20Complete.otf">meslo</a> 以支持命令行显示炫酷的Unicode字符。</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在人生边上]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older-beside-life.html</url>
      <content type="html"><![CDATA[<h2 id="写在人生边上"><a href="#写在人生边上" class="headerlink" title="写在人生边上"></a>写在人生边上</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>代码写久了，人就有些木讷。写在也会也不小心打成卸载。</p>
<p>自拿到毕业证已过了一个月。一直把大学毕业称为社会人的起点，左右脚都远远踏出了校门，竟早已是个彻头彻尾的社会人。临毕业的一年中四海为家，到今天累计也只在西安待过三月余。四海为家的社会人，实在是早已深入了人生的内在，人生一词，仿佛没视野的小地图一般在眼前展开了一团未知地形。</p>
<span id="more"></span>

<p>去年12月初到上海。创业公司的工作时间格外长，每晚回家时都已过了商场点灯的时间。公司到家只有500米的路程，却常常走得格外漫长，只有在黑灯瞎火的路上可以不想接下来要干什么。在这段极短的路程里，有一座叫做虹桥艺术中心的后现代风格建筑物。刚去的时候想着家门口的建筑以后总有时间去看一看。后来就想都来了这么久了，已经过了带着好奇去探索的时节了。</p>
<p>小时候常常思考人生应当是个什么东西，然而这个词实在平凡得像一个65公斤的胖子，让人难以说出确切的内涵来。在人生靠近起点的地方没有思考的问题在后来竟再没有时间思考。这愚蠢的问题，大概小时候就该想明白吧。及更没有明白，那也决不能承认。</p>
<p>我到今天也想不明白该把人生过成什么样子。也就找不到人生是个什么东西。只好先卸载它边上。</p>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>到今天已经活过了22年零六个月，比很多人大一些岁数，也比更多人小更多岁数，暂时还可以称为年轻人。即便如此我也不好以年轻人自居，姑且称为未来的老年人。</p>
<p>作为一个未来的老年人，要总结这二十几年究竟干了些什么也实属不易。在很长的一段时间里把考上清华当做若干执念中唯一可以说出去的一条，然而年纪越大执念越多。努力学习考清华虽然重要，终究还是不如用自由的方式生活重要。人生果然没有让人失望。再往后，就获赠价值不菲的重考权，考下一阶段权和以后再考权。而所谓执念，大概就是当你所获其他东西越多，越觉得未能达成执念十分遗憾。于是很长一段时间，都在用懒惰与执念做着艰难的搏斗，所幸收效不微，终于在成为社会人以后有勇气放下执念。</p>
<p>大学以前的求学生涯中，所构思过的人生无非是考入哪个大学。而在超常发挥失败以后的很长一段时间里，都在思考如何走入从前既定的道路中去。至于人生本身，还从来没有人催我去构思。</p>
<p>大学的四年中学了很多东西。外语和编程语言都学了不少，唯独语文不曾学过。因而也实在无法将已经与从前判若两人的这个人的思想用从前的这个人的语言表达清楚，即便所想描述的仅仅是一个具体的事物：自己。这大概是我这四年来思考最多的问题。虽然没有得到答案，但从过程上大概又多了一些得分。至少，认识自己会是人生边上最重要的研究课题之一。</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>去年7月离开西安时还是一个大三的学生。离开后当然也是，但是语境中难免掺杂上其他的东西。在松山湖时天天能见到李泽湘，有时候会想他大三的时候在干什么。能够想到的答案显然说明我比较厉害。然而人生并非一定如此，年与时驰，意与日去，遂成枯落。人的执念何曾止于清华北大。</p>
<p>智勇多困于所溺。为欲望所驱赶疲于奔命未必就是人生的样子，而无论看起来如何，人生所构成的图画已远比一切艺术高贵，远比一切文字优雅，远比一切思想深邃，远比一切伟大的成就更加伟大，远比一切有用和没用的事物都更有价值和意义。</p>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 人生的经验 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这是一篇小文章]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older/little-passage-20180706.html</url>
      <content type="html"><![CDATA[<p>用了很久的时间打开电脑。</p>
<p>毕业以来就想写一篇文章记录感受，然而直到今天还没有动笔。因为总觉一动笔就要洋洋洒洒大几千字，说尽平生事，用上一个连绵不绝的黑夜。经久不息的拖延症也大概是以此为由要挟我停止写作。</p>
<p>我不。我要写。我甚至已经写完了。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flag </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于军舰岛]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older-remarks-movie-BattleshipIsland.html</url>
      <content type="html"><![CDATA[<image src="http://qiniu.cdn.hive-intel.com/aak1247/946f0a8cf26dfe2f57a28a73be5ee41e.jpg" width="100%">
一个落后的民族在真实的历史面前犹如待宰的羔羊。民族的屈辱对于那一段历史中的每一个人都是无比沉重的痛苦，个体宛如泡沫般脆弱和无力。
<span id="more"></span>
占领国用谎言引诱着殖民地的人民沦为如牲畜般被欺辱的劳工，颇为讽刺的是劳工们受到最多的欺辱来自于自己的同胞，而引诱他们的谎言的传播者也正是这些同胞。
柳昇莞的讲述比起历史明显温柔了许多。真实的端岛没有这样一个成功逃脱的结局，也没有一个带领同胞成功发动起义的大英雄，只有无数惨死在同胞的告密和敌人的压迫下的劳工，以及他们没有人知道和记得的故事。
三菱公司统治下的端岛犹如地狱。数千来自中国和朝鲜的劳工在深达一千米的矿洞中被强迫劳动，食不果腹，瘦如骷髅。到二战结束时约1300名劳工死在这座不过天安门广场六分之一大小的小岛上。（其中多数为中国劳工）
如今，这座中韩劳工的屈死之岛，却被日本作为自己工业化的历史成功申遗洗白成了世界名胜古迹。而作为惨死此岛的劳工的同胞，我们应当铭记这座地狱岛真实的历史。
军舰岛真正的名字是地狱岛。]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 军舰岛 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git完成HTTPS的自动账号密码填充]]></title>
      <url>http://www.aak1247.cn/blogs/2018/older-git-https-auto-input.html</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要介绍如何通过expect来在交互环境中实现自动填充账号密码，解决HTTPS方式需要手动输入账号密码的问题，不过能用SSH的话最好还是用ssh吧。</p>
<span id="more"></span>

<h1 id="关于expect"><a href="#关于expect" class="headerlink" title="关于expect"></a>关于expect</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Expect是一个用来处理交互的命令。借助Expect，我们可以将交互过程写在一个脚本上，使之自动化完成。形象的说，ssh登录，ftp登录等都符合交互的定义。Expect的作者Don Libes在1990年 开始编写Expect时对Expect做有如下定义：Expect是一个用来实现自动交互功能的软件套件 (Expect [is a] software suite for automating interactive tools)。使用它系统管理员 的可以创建脚本用来实现对命令或程序提供输入，而这些命令和程序是期望从终端（terminal）得到输入，一般来说这些输入都需要手工输入进行的。 Expect则可以根据程序的提示模拟标准输入提供给程序需要的输入来实现交互程序执行。甚至可以实现实现简单的BBS聊天机器人。 </p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ol>
<li><code>send</code>命令</li>
</ol>
<p> 接收一个字符串参数，并将该参数发送到进程。</p>
<ol start="2">
<li><code>expect</code>命令</li>
</ol>
<p><code>expect</code>通常是用来等待一个进程的反馈。expect可以接收一个字符串参数，也可以接收正则表达式参数。</p>
<pre><code>基于expect和send就可以完成与标准输入输出的交互，如：
</code></pre>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect -f</span> </span><br><span class="line">expect &#123;     //返回信息匹配 </span><br><span class="line">    &quot;*yes/no&quot; &#123; send &quot;yes\r&quot;; exp_continue&#125; //第一次ssh连接会提示yes/no,继续 </span><br><span class="line">    &quot;*password:&quot; &#123; send &quot;$password\r&quot; &#125;  //出现密码提示,发送密码 </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>但是在git push、ftp等场景下，需要同其他进程进行交互。而要同其他进程进行交互，需要用到<code>spawn</code>命令。<br>3. <code>spawn</code>命令</p>
<p><code>spawn</code>命令就是用来启动新的进程的。<code>spawn</code>后的<code>send</code>和<code>expect</code>命令都是和<code>spawn</code>打开的进程进行交互的。</p>
<p>有了<code>send</code>, <code>expect</code>, <code>spawn</code>命令，就可以完成自动账号密码填充了。</p>
<ol start="4">
<li><code>interact</code>命令</li>
</ol>
<p><code>interact</code>命令用于从expect接管输入输出的自动状态转移到用户交互状态， 可以在自动提交完成以后加入<code>interact</code>命令作为结束。</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>下面就是干货：</p>
<ol>
<li>首先安装expect</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install expect</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写脚本</li>
</ol>
<p>在git 仓库底下编写push.sh:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line">set username &quot;abc&quot;</span><br><span class="line">set password &quot;123456789&quot;</span><br><span class="line">spawn git push</span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;Username*:&quot; &#123; send &quot;$username\r&quot;;exp_continue&#125;</span><br><span class="line">        &quot;Password*:&quot; &#123; send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>
<p>每次提交时运行脚本即可。</p>
<p>不过最好的方式，当然还是用<code>ssh</code>。</p>
]]></content>
      
        <categories>
            
            <category> SRE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> linux </tag>
            
            <tag> expect </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用js进行文件下载的方法]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-js-download-blob.html</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;今天学到了一种使用js实现文件下载的方法,相比用表单进行下载要安全很多,不会有跳转问题,而且便于掌握下载进度.</p>
<h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><ol>
<li>首先,使用ajax下载文件内容,读到内存中去. 这一步需要使用Blob对象存储文件内容;</li>
<li>然后建立一个隐藏的a标签,其链接指向内存中的地址. 这一步使用URL.createObjectUrl()方法拿到内存中的地址;</li>
<li>点击下载(直接调用a标签的click()方法即可),即从内存中下载到磁盘中去;</li>
</ol>
<span id="more"></span>
<h2 id="Blob对象的用法"><a href="#Blob对象的用法" class="headerlink" title="Blob对象的用法"></a>Blob对象的用法</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><code>Blob(Content:array, options:Object)</code></p>
<h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><p><code>&#123;type: type&#125;</code>: blob对象的MIME类型, 比如<code>text/html</code>或<code>application/octet-binary</code>等等.</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&quot;test&quot;</span>], &#123;<span class="attr">type</span>: <span class="string">&quot;application/csv&quot;</span>&#125;)<span class="comment">//MIME类型为csv的Blob对象</span></span><br></pre></td></tr></table></figure>

<h2 id="获取URL并实现下载"><a href="#获取URL并实现下载" class="headerlink" title="获取URL并实现下载"></a>获取URL并实现下载</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&quot;test&quot;</span>], &#123;<span class="attr">type</span>: <span class="string">&quot;application/csv&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">a.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);<span class="comment">//创建指向此blob的链接</span></span><br><span class="line">a.<span class="property">download</span> = <span class="string">&quot;test.csv&quot;</span>;</span><br><span class="line"><span class="comment">//输出类似于blob:http://$website/fsadjlfsdjl 这样的字符串</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(a);</span><br><span class="line">a.<span class="title function_">click</span>();<span class="comment">//实现下载</span></span><br><span class="line">a.<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure>

<h2 id="从远端下载"><a href="#从远端下载" class="headerlink" title="从远端下载"></a>从远端下载</h2><p>如果要从远端下载文件,先使用ajax下载数据, 在拿到数据以后再使用blob做处理就好.</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用jquery</span></span><br><span class="line">$.<span class="title function_">get</span>(url, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data], &#123;<span class="attr">type</span>: <span class="string">&quot;application/csv&quot;</span>&#125;);<span class="comment">//加一个方括号,data会直接转为字符串, 这里有一个问题,就是jquery本身会将data作为String处理</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&quot;download.csv&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    a.<span class="title function_">remove</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>考虑到jQuery的问题以及兼容性等, 以及不能转为字符串的情况, 可以使用传统的XMLHttpRequest发送请求(),代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用XMLHttpRequest</span></span><br><span class="line"><span class="keyword">var</span> httpRequest;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">    httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123; <span class="comment">// 兼容ie6及之前的版本</span></span><br><span class="line">    httpRequest = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">httpRequest.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url<span class="comment">/*url地址*/</span>, <span class="literal">true</span>);</span><br><span class="line">httpRequest.<span class="property">responseType</span> = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">httpRequest.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span> ) &#123;</span><br><span class="line">        <span class="keyword">var</span> blob = <span class="variable language_">this</span>.<span class="property">response</span>;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        reader.<span class="title function_">readAsDataURL</span>(blob);</span><br><span class="line">        reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">ev</span>) &#123;<span class="comment">//读入完成事件</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            a.<span class="property">href</span> = ev.<span class="property">target</span>.<span class="property">result</span>;<span class="comment">//读取结果</span></span><br><span class="line">            a.<span class="property">download</span> = <span class="string">&quot;download.csv&quot;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">            a.<span class="title function_">click</span>();</span><br><span class="line">            a.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">httpRequest.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>


<h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>还可以使用此方法来动态加载图片, 只需要把blob对象的URL给到img的src里就好, 其他资源也一样.</p>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> blob </tag>
            
            <tag> 下载 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot配置AOP实践]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-spirng-boot-aop.html</url>
      <content type="html"><![CDATA[<h1 id="关于AOP"><a href="#关于AOP" class="headerlink" title="关于AOP"></a>关于AOP</h1><h2 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在许多系统中都会有一些公共的行为或者逻辑，如果分散在各处一则重复代码很不优美，二则会给修改维护带来一些问题。将这些公共的行为抽离出来作为单独的可重用组件供需要的其他组件进行调用可以很有效地解决上述问题，而抽离出来的组件就是一个切面（<code>Aspect</code>）。</p>
<span id="more"></span>
<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ol>
<li>通知（增强）Advice<ul>
<li>定义了切面的行为逻辑以及它什么时候使用。比如在切点之前、之后、抛出异常时。</li>
<li>通知的类型：<blockquote>
<ol>
<li>Before：前置通知，在切点之前调用通知（执行通知定义的行为）</li>
<li>After：后置最终通知，在切点之后调用通知，无论切点所对应的方法执行成功与否</li>
<li>After-returning：后置返回通知，在切点对应方法执行成功之后调用通知</li>
<li>After-throwing：后置异常通知，在切点指定方法抛出异常后进行通知</li>
<li>Around：环绕通知，通知包裹了被通知的切点方法，在被通知的方法调用之前和调用之后执行自定义的行为</li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li>连接点 Join point<ul>
<li>连接点是在应用执行过程中能够插入切面的点。</li>
<li>连接点是切面的调用者。</li>
<li>切面在连接点处插入到运行流程当中。</li>
</ul>
</li>
<li><h2 id="切点-Pointcut-切点用于确定通知执行的时间，也就是通知与连接点的关系，如指定某些方法（连接点）为通知所匹配的切点，则该通知就围绕这些方法执行。-切点会匹配通知所要织入的一个或者多个连接点。"><a href="#切点-Pointcut-切点用于确定通知执行的时间，也就是通知与连接点的关系，如指定某些方法（连接点）为通知所匹配的切点，则该通知就围绕这些方法执行。-切点会匹配通知所要织入的一个或者多个连接点。" class="headerlink" title="切点 Pointcut - 切点用于确定通知执行的时间，也就是通知与连接点的关系，如指定某些方法（连接点）为通知所匹配的切点，则该通知就围绕这些方法执行。 - 切点会匹配通知所要织入的一个或者多个连接点。"></a>切点 Pointcut<br> - 切点用于确定通知执行的时间，也就是通知与连接点的关系，如指定某些方法（连接点）为通知所匹配的切点，则该通知就围绕这些方法执行。<br> - 切点会匹配通知所要织入的一个或者多个连接点。</h2></li>
<li>切面 Aspect<ul>
<li>切面是通知和切点的集合，通知和切点共同定义了切面的全部功能。</li>
<li>可以理解为包含切点和通知的类。</li>
</ul>
</li>
<li>引入 Introduction<ul>
<li>引入允许我们向现有的类中添加方法或属性。</li>
</ul>
</li>
<li>织入 Weave<ul>
<li>织入是将切面应用到目标对象来创建的代理对象过程。</li>
<li>切面在指定的连接点被织入到目标对象中，在目标对象的生命周期中有多个点可以织入:<blockquote>
<ol>
<li>编译期——切面在目标类编译时期被织入，这种方式需要特殊编译器。AspectJ的织入编译器就是以这种方式织入切面。</li>
<li>类加载期——切面在类加载到JVM ，这种方式需要特殊的类加载器，他可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5 的 LTW 就支持这种织入方式</li>
<li>运行期——切面在应用运行期间的某个时刻被织入。一般情况下，在织入切面时候，AOP 容器会为目标对象动态的创建代理对象。Spring AOP 就是以这种方式织入切面。</li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li>代理 Proxy<ul>
<li>实现AOP所使用的机制，可以分为动态代理和静态代理。</li>
</ul>
</li>
<li>横切关注点 Cross-cuting Concerns<ul>
<li>即影响应用多处的功能，如安全、事务、日志等，将这些横切关注点抽离出来变成公共的组件就得到切面。</li>
</ul>
</li>
</ol>
<h2 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h2><p>spring中使用动态代理实现AOP。</p>
<h1 id="spring-boot中aop的配置"><a href="#spring-boot中aop的配置" class="headerlink" title="spring boot中aop的配置"></a>spring boot中aop的配置</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>如果使用 <code>maven</code> 在 <code>dependencies</code> 中添加文件依赖即可，其他请自行修改。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h2 id="建立一个切面"><a href="#建立一个切面" class="headerlink" title="建立一个切面"></a>建立一个切面</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Aspect</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAop</span> &#123;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="创建切点"><a href="#创建切点" class="headerlink" title="创建切点"></a>创建切点</h2><p>在 <code>TestAop</code> 中建立切点方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.aak1247.testaop.controller..*.*(..))&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeService</span><span class="params">()</span>&#123;  </span><br><span class="line">  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这个切点匹配 <code>com.aak1247.testaop.controller</code> 包下的所有类的所有方法（作为连接点）。</p>
<h2 id="创建通知"><a href="#创建通知" class="headerlink" title="创建通知"></a>创建通知</h2><p>在 <code>TestAop</code> 中建立通知方法，这里以前置通知（@Before）为例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;executeService()&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBeforeAdvice</span><span class="params">(JoinPoint joinPoint)</span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;调用前置通知&quot;</span>);    </span><br><span class="line">    Object[] obj = joinPoint.getArgs();  <span class="comment">//获取目标方法的参数信息</span></span><br><span class="line">    joinPoint.getThis();      <span class="comment">//AOP代理类的信息 </span></span><br><span class="line">    joinPoint.getTarget();      <span class="comment">//代理的目标对象  </span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();      <span class="comment">//通知的签名  </span></span><br><span class="line">    System.out.println(signature.getName());      <span class="comment">//代理的方法名</span></span><br><span class="line">    System.out.println(signature.getDeclaringTypeName());  <span class="comment">//AOP代理类名字  </span></span><br><span class="line">    System.out.println(signature.getDeclaringType());      <span class="comment">//AOP代理类的类（class）信息  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<ul>
<li>如果是后置最终通知，其参数与前置通知相同。</li>
<li>而后置返回通知的参数可以为 <code>JointPoint</code> 和返回对象，也可以仅仅为返回对象，如<code>Object para</code>。</li>
<li>后置异常通知的参数类型为<code>JointPoint</code>和<code>Throwable</code>。</li>
<li>环绕通知必须包含一个<code>org.aspectj.lang.ProceedingJoinPoint</code>类型参数。</li>
</ul>
<blockquote>
<p>在web环境下可以通过<code>RequestContextHolder</code>获取请求信息。</p>
</blockquote>
<h2 id="创建连接点"><a href="#创建连接点" class="headerlink" title="创建连接点"></a>创建连接点</h2><p>在<code>com.aak1247.testaop.controller</code>包下建立类和方法，作为前置通知的连接点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> Class testController&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testBeforeService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test controller&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>emmmm….结果自测好伐？</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="AspectJ风格的切点表达式"><a href="#AspectJ风格的切点表达式" class="headerlink" title="AspectJ风格的切点表达式"></a><code>AspectJ</code>风格的切点表达式</h2><p>应该注意到，在<code>@Pointcut(&quot;execution&quot;)</code>注解中，括号里的内容可以通过一个模式匹配多个方法（连接点）。</p>
<p><code>@Pointcut(&quot;exexution(a b.c(..))&quot;)</code></p>
<ul>
<li>a 确定了匹配到的方法的类型（public&#x2F;private&#x2F;protected&#x2F;*）</li>
<li>b 确定包名和类名，（可以是接口名），可以是包含通配符<code>*</code>的模式</li>
<li>c 确定了方法名，可以是包含通配符<code>*</code>的模式</li>
<li>一个比较特殊的用法，比如如果指定c为<code>*</code>，而b为一个接口，就可以匹配实现了接口方法的所有方法</li>
</ul>
<blockquote>
<p>除此之外，<code>within</code>，<code>target</code>，<code>args</code>等注解也可以用来匹配连接点。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring boot </tag>
            
            <tag> aop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫要学的内容]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-python-scrapy-path.html</url>
      <content type="html"><![CDATA[<h1 id="流派"><a href="#流派" class="headerlink" title="流派"></a>流派</h1><ol>
<li>python</li>
<li>js</li>
<li>java</li>
</ol>
<span id="more"></span>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h3><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰</a></p>
<p><a href="http://www.runoob.com/python/python-100-examples.html">Python100例-菜鸟教程</a></p>
<h3 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h3><p><a href="http://cn.python-requests.org/zh_CN/latest/">requests中文文档</a></p>
<p><a href="http://blog.csdn.net/shanzhizi/article/details/50903748">requests详解</a></p>
<h3 id="scrapy框架"><a href="#scrapy框架" class="headerlink" title="scrapy框架"></a>scrapy框架</h3><p><a href="http://blog.csdn.net/pleasecallmewhy/article/details/19642329">使用scrapy编写爬虫</a></p>
<p><a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html">scrapy官方教程</a></p>
<h3 id="HTTP、HTML及其他相关"><a href="#HTTP、HTML及其他相关" class="headerlink" title="HTTP、HTML及其他相关"></a>HTTP、HTML及其他相关</h3><p><a href="">html</a></p>
<p><a href="">http</a></p>
<p><a href="">正则表达式</a></p>
<p><a href="">文件操作</a></p>
<p><a href="">数据库</a></p>
<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1>]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 服务脚本编写]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-java-jar-as-service.html</url>
      <content type="html"><![CDATA[<p>在进行服务器部署时，常常会需要让程序作为服务启动。使用服务的方式运行程序有以下优点：<br>    1. 随时控制程序运行、重启；<br>    2. 方便开机自启动；<br>    3. 启动命令更方便。</p>
<h1 id="systemd-和-init"><a href="#systemd-和-init" class="headerlink" title="systemd 和 init"></a>systemd 和 init</h1><span id="more"></span>
<p>init是一个由内核启动的用户级进程。 </p>
<p>内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>init进程作为服务的启动进程由来已久，但是其存在启动较慢、编写复杂的问题。</p>
<p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。</p>
<p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面，对于其命令，这里不作过多介绍。在一些比较新版本的Linux中，systemd 取代了init，其进程编号为1，故服务的启动也是通过<code>systemd</code>进行管理。<br>可以使用<code>systemctl --version</code>命令查看<code>systemd</code>的版本。</p>
<h1 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h1><ol>
<li>配置服务启动脚本</li>
<li>配置命令处理脚本</li>
<li>开机自启</li>
</ol>
<h1 id="配置服务启动脚本"><a href="#配置服务启动脚本" class="headerlink" title="配置服务启动脚本"></a>配置服务启动脚本</h1><p>ubuntu LTS 16.04的服务依赖于<code>systemd</code>的服务管理。<br>听说，<code>systemd</code>的配置位于<code>/usr/lib/systemd/system</code>目录下。但是在ubuntu 16.04中，服务的目录为<code>/lib/systemd/system</code>,要建立一个名为<code>hello</code>的服务，就在此目录下添加一个文件名为<code>hello.service</code>的文件即可。其内容包含：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=xxxxxxxxxxxxxxxx #描述服务 </span><br><span class="line">After=network.target #用于指定服务启动的前置条件</span><br><span class="line">Documentation=  #帮助文件的地址如http://baidu.com/ ，可缺省</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User=  启动用户</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Group=  启动用户组</span></span><br><span class="line">ExecStart=  #服务启动命令，此项必填</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ExecStop=  服务终止命令，可缺省</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Recommended limits <span class="keyword">for</span> <span class="keyword">for</span> mongod as specified <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings</span></span><br><span class="line"></span><br><span class="line">[Install] #用来定义如何启动，以及是否开机启动。</span><br><span class="line">WantedBy=multi-user.target #当服务开机启动后，会放入什么文件夹，影响启动顺序</span><br></pre></td></tr></table></figure>


<h2 id="举一个例子-java-web服务器"><a href="#举一个例子-java-web服务器" class="headerlink" title="举一个例子: java web服务器"></a>举一个例子: java web服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=A java server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/java -jar hello.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file size</span></span><br><span class="line">LimitFSIZE=infinity</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cpu time</span></span><br><span class="line">LimitCPU=infinity</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">virtual memory size</span></span><br><span class="line">LimitAS=infinity</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">open files</span></span><br><span class="line">LimitNOFILE=64000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">processes/threads</span></span><br><span class="line">LimitNPROC=64000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">total threads (user+kernel)</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line">TasksAccounting=false</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>需要注意的是， 服务启动命令需要输入绝对路径的形式，因为在服务启动时，可能相关的环境变量还未加载。</p>
<p>在<code>/lib/systemd/system</code>路径下添加此文件并保存为<code>hello.service</code>后，就可以通过<code>service hello start</code>命令启动服务了。</p>
<p>可以通过<code>systemctl status hello.service</code>命令查看服务状态。</p>
<h2 id="更详细的设定"><a href="#更详细的设定" class="headerlink" title="更详细的设定"></a>更详细的设定</h2><p>[Unit]区块通常是配置文件的第一个区块，用来定义 Unit(在这里就是服务) 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。</p>
<pre><code>Description：简短描述
Documentation：文档地址
Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败
Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败
BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行
Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动
After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动
Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行
Condition...：当前 Unit 运行必须满足的条件，否则不会运行
Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败
</code></pre>
<p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p>
<pre><code>Type：定义启动时的进程行为。它有以下几种值。
Type=simple：默认值，执行ExecStart指定的命令，启动主进程
Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出
Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行
Type=dbus：当前服务通过D-Bus启动
Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行
Type=idle：若有其他任务执行完毕，当前服务才会运行
ExecStart：启动当前服务的命令
ExecStartPre：启动当前服务之前执行的命令
ExecStartPost：启动当前服务之后执行的命令
ExecReload：重启当前服务时执行的命令
ExecStop：停止当前服务时执行的命令
ExecStopPost：停止当其服务之后执行的命令
RestartSec：自动重启当前服务间隔的秒数
Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog
TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数
Environment：指定环境变量
</code></pre>
<p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>
<pre><code>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中
RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中
Alias：当前 Unit 可用于启动的别名
Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit
</code></pre>
<p>完整配置可以查看<br><a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html">官方文档</a></p>
<h1 id="配置其他命令处理脚本"><a href="#配置其他命令处理脚本" class="headerlink" title="配置其他命令处理脚本"></a>配置其他命令处理脚本</h1><p>其他命令的处理与旧版本的ubuntu类似，脚本位于<code>/etc/init.d/</code>路径下，如<code>hello</code>服务，其脚本应保存为<code>hello</code>或<code>hello.sh</code>。编写脚本处理命令即可。</p>
<h1 id="举一个栗子"><a href="#举一个栗子" class="headerlink" title="举一个栗子"></a>举一个栗子</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chkconfig - 85 15</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">description: hello service</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">processname: hello</span></span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">        bye)</span><br><span class="line">                echo &quot;bye&quot;</span><br><span class="line">                exit 0</span><br><span class="line">        ;;</span><br><span class="line">        hello)</span><br><span class="line">                echo &quot;hello&quot;</span><br><span class="line">                java -jar hello.jar&amp;</span><br><span class="line">                exit 0</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;不存在的&quot;</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<h1 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h1><p>要使得服务自启动，输入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable hello.service</span><br></pre></td></tr></table></figure>
<p>即可，关闭自启动输入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable hello.service</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> SRE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu Linux 装机完成后的工作]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-linux-start.html</url>
      <content type="html"><![CDATA[<p>记录一下一些我比较常用的配置。</p>
<span id="more"></span>

<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>主要配置 zsh 替代默认的bash, 配置地址<a href="https://github.com/aak1247/shell-set-up">shell start up</a>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh git &amp;&amp;\</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/aak1247/shell-set-up/master/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p><img src="http://qiniu.cdn.hive-intel.com/aak1247/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_20180920140817.png" alt="截图"></p>
<p>简单的基本vim配置，语法高亮、自动缩进等、状态栏配置等。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/aak1247/vimrc.git ~/.vim_runtime</span><br><span class="line">sh ~/.vim_runtime/install_awesome_vimrc.sh</span><br></pre></td></tr></table></figure>

<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>很好看的tmux配置。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/aak1247/.tmux/master/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure>


<h1 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h1><h2 id="node配置"><a href="#node配置" class="headerlink" title="node配置"></a>node配置</h2><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<h3 id="通过-nvm-安装-node"><a href="#通过-nvm-安装-node" class="headerlink" title="通过 nvm 安装 node"></a>通过 nvm 安装 node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br><span class="line">nvm use stable</span><br></pre></td></tr></table></figure>

<p>在zsh下，可能需要（如果也安装了bash）手动将 nvm 环境变量加入 ~&#x2F;.zshrc文件末尾:</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line"> [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line"> [ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>

<p>然后更新一下配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br><span class="line">````</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 安装yarn</span></span></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install --no-install-recommends yarn</span><br></pre></td></tr></table></figure>

<h3 id="配置淘宝镜像"><a href="#配置淘宝镜像" class="headerlink" title="配置淘宝镜像"></a>配置淘宝镜像</h3><h4 id="npm-更换源"><a href="#npm-更换源" class="headerlink" title="npm 更换源"></a>npm 更换源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h4 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="yarn-更换源"><a href="#yarn-更换源" class="headerlink" title="yarn 更换源"></a>yarn 更换源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h2 id="python配置"><a href="#python配置" class="headerlink" title="python配置"></a>python配置</h2><h3 id="安装-python-pip-和-pipenv"><a href="#安装-python-pip-和-pipenv" class="headerlink" title="安装 python&#x2F;pip 和 pipenv"></a>安装 python&#x2F;pip 和 pipenv</h3><p>可以通过apt方式安装</p>
<h2 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h2><h3 id="安装-openjdk-openjdk-jre"><a href="#安装-openjdk-openjdk-jre" class="headerlink" title="安装 openjdk &#x2F; openjdk-jre"></a>安装 openjdk &#x2F; openjdk-jre</h3><p>安装运行环境：<code>$ sudo apt-get install openjdk-8-jre</code>, 可以更改为其他版本 更改数字即可。</p>
<p>安装开发环境：<code>$ sudo apt-get install openjdk-8-jdk</code>。</p>
<p>使用openjdk的优点在于免去手动下载和配置环境变量的步骤，方便很多，但是<code>openjdk</code>与oracle jdk所包含的库有所差异，jdk9及以后版本的openjdk还存在一些其他问题。</p>
<h3 id="安装oracle-jdk-jre"><a href="#安装oracle-jdk-jre" class="headerlink" title="安装oracle jdk&#x2F;jre"></a>安装oracle jdk&#x2F;jre</h3><h4 id="首先下载jdk"><a href="#首先下载jdk" class="headerlink" title="首先下载jdk"></a>首先下载jdk</h4><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">官网</a></p>
<p>可以先配置<code>FTP</code>然后通过<code>FTP</code>上传到服务器，也可以直接用<code>wget</code>命令下载，附<a href="#%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5">下载链接</a></p>
<h5 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h5><p><a href="http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/server-jre-8u144-linux-x64.tar.gz">Java SE 8 server sdk for x64</a></p>
<p><a href="http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz">Java SE 8 JDK for X64</a></p>
<p><a href="http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jre-8u144-linux-x64.tar.gz">Java SE 8 jre for x64</a></p>
<h2 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip #安装自带Python2.7对应的pip</span><br><span class="line">sudo apt install python3 #安装python3</span><br></pre></td></tr></table></figure>

<h3 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br><span class="line">sh Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>

<h3 id="coda"><a href="#coda" class="headerlink" title="coda"></a>coda</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><h3 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h3><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><p><code>sudo apt install mongodb</code></p>
<h3 id="配置数据库文件路径和日志文件路径"><a href="#配置数据库文件路径和日志文件路径" class="headerlink" title="配置数据库文件路径和日志文件路径"></a>配置数据库文件路径和日志文件路径</h3><p>配置文件为：<code>/etc/mongodb.conf</code>。</p>
<h3 id="运行mongodb数据库"><a href="#运行mongodb数据库" class="headerlink" title="运行mongodb数据库"></a>运行mongodb数据库</h3><p><code>$ sudo service start mongodb start</code></p>
<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>留坑</p>
<h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h2><p>似乎不用怎么配置，直接安装即可<br><code>sudo apt install maven</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mvn -v</span></span><br></pre></td></tr></table></figure>

<h1 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h1><h2 id="tmux-vim-oh-my-zsh安装脚本"><a href="#tmux-vim-oh-my-zsh安装脚本" class="headerlink" title="tmux+vim+oh-my-zsh安装脚本"></a>tmux+vim+oh-my-zsh安装脚本</h2><p>留坑待填</p>
<h2 id="全家桶脚本"><a href="#全家桶脚本" class="headerlink" title="全家桶脚本"></a>全家桶脚本</h2><p>留坑填</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 装机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cmder使用笔记]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-note-about-cmder.html</url>
      <content type="html"><![CDATA[<h2 id="cmder简介"><a href="#cmder简介" class="headerlink" title="cmder简介"></a>cmder简介</h2><img class="full-image" src="http://cmder.net/img/main.jpg"/>


<p>&nbsp;&nbsp;&nbsp;&nbsp;留坑待填</p>
<h2 id="关于alias的配置"><a href="#关于alias的配置" class="headerlink" title="关于alias的配置"></a>关于alias的配置</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;cmd下的配置位于<code>cmder/config/user-alias.cmd</code>，bash下的配置可以通过在<code>cmder/config/user-profile.sh</code>中加入如：<code>alias la=&#39;ls --all&#39;</code>来进行添加。也可以在vender中对应的shell客户端配置中添加。</p>
<p><strong>黑科技</strong>: 添加一条<code>alias myalias=&#39;echo &quot;alias $*&quot;&gt;&gt;$&#123;config position&#125;&#39;</code>，其中<code>$&#123;config position&#125;</code>为当前配置文件的路径，即可在以后通过<code>myalias</code>命令添加永久alias。</p>
<span id="more"></span>





]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> cmder </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于SSH架构中Entity/Dao/Service/Controller的理解]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-dao-service-entity.html</url>
      <content type="html"><![CDATA[<h1 id="SSH框架的分层"><a href="#SSH框架的分层" class="headerlink" title="SSH框架的分层"></a>SSH框架的分层</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;学完了SSH框架，尽管还是不断地踩坑，但是对于整体的设计模式有了一定的了解。从作用上来说spring框架是一个Java的对象管理框架, 其主要作用是提供对象从创建到销毁的一套关系；而hibernate则是将数据库对象转化为Java对象的持久层和数据层框架，是对CRUD操作的一层封装。而spring MVC或Struts则是一个MVC的分层框架，充当路由器和分发者的角色。在SSH这样的框架基础上进行开发比起直接进行web开发面向对象的特性更明显，因此在设计模式上也具有一定的特点。</p>
<span id="more"></span>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在SSH框架中常见的Entity类是模型层，本质是数据表的对象化，属于数据层的封装，主要作用在于用对象来映射数据库表，主要包含对象的参数也就是数据表的表项以及所对应的set和get方法。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;而DAO类则是对数据操作的一层封装，是持久层的封装，比如通过将hibernate session的方法封装为DAO类的方法来提供持久层的操作，其成员主要为session对象所提供的CRUD方法，以及封装到更高层的操作。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;而Service则提供完整的业务逻辑，通过逻辑判断处理用户输入等比如判断输入是否合法，对于合法的数据和操作通过调用Dao类的方法来进行数据库访问和持久化，属于控制层或者说业务层，同时也直接连接着持久层。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;而Controller则是与用户直接交互的对象，通过处理请求调用service来响应用户操作，同时给出响应和处理视图层。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在这种分层中，比较主要的一点在于将直接的数据库操作全部放在Dao层中，避免侵入Service层，而将所有的业务逻辑放在Service中，避免侵入Controller层。</p>
<p>其关系可以表示如下：<br><image src="http://qiniu.cdn.hive-intel.com/aak1247/SSH-ENTITY_DAO_SERVICE_CONTROLLER.png"/></p>
<h1 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h1><p>写这里时其实已经过去了很久。在编程的实践中常常容易把一些看似不太重要的细节忽略掉，比如写比较简单的业务逻辑就直接在controller中做了处理，在逐渐增加功能时就会在不经意间把controller越写越大，更重要的一点在于常常会忽略代码的重用性，这其实都是非常不好的实践。</p>
]]></content>
      
        <categories>
            
            <category> 开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> ssh </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby学习笔记（一）安装和基本语法]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-ruby-study-1.html</url>
      <content type="html"><![CDATA[<h2 id="关于ruby"><a href="#关于ruby" class="headerlink" title="关于ruby"></a>关于ruby</h2><h3 id="为什么学习ruby"><a href="#为什么学习ruby" class="headerlink" title="为什么学习ruby"></a>为什么学习ruby</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;和Python一样，Ruby也是一个相当开发者友好的语言，遵循着最小惊讶原则设计的ruby语言甚至在一定程度上比起Python更加容易学习和使用。ruby on rails在web运用相当广泛，在学习成本不高的前提下学习ruby还是相当合算的。</p>
<span id="more"></span>
<h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.ruby-lang.org/zh_cn/documentation/">ruby.org</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.runoob.com/ruby/ruby-tutorial.html">菜鸟教程</a></p>
<h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Linux下直接<code>apt-get install ruby</code>就好，Windows下有安装包。嗯不多说了…</p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;bash下输入<code>irb</code>即可进入ruby的交互式命令行工具，用来学习语法命令行很棒。退出irb命令行输入<code>exit</code>、<code>quit</code>或<kbd>CTRL</kbd>+<kbd>D</kbd>。也可以输入<code>ruby</code>进入命令行，输入<kbd>CTRL</kbd>+<kbd>D</kbd>运行,但是体验大概不太好。</p>
<h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;ruby源文件后缀为<code>rb</code>编写一个<code>test.rb</code>然后在bash中输入<code>ruby test.rb</code>即可运行。</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="第一个ruby程序"><a href="#第一个ruby程序" class="headerlink" title="第一个ruby程序"></a>第一个ruby程序</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;新建一个<code>helloworld.rb</code>在里面输入<code>puts &quot;hello world&quot;</code>，保存并运行。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ruby helloworld.rb</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;嗯，和ruby的幸福生活开始了呢。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><h5 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;输入使用<code>gets</code>，标准的输出使用<code>puts</code>或<code>print</code>，两者用法相似，不同之处在于<code>puts</code>在输出完成以后会进行一次换行，相当于Java的<code>println()</code>,但是当输出字符串结尾是换行时两者功能一致，单个字符的输出也可以使用<code>putc</code>。注意：没有<code>getc</code>。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;example：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val=gets        <span class="comment">#在控制台输入hello</span></span><br><span class="line">puts val        <span class="comment">#输出hello(换行)</span></span><br><span class="line">puts <span class="string">&quot;hello&quot;</span>    <span class="comment">#输出hello（换行）</span></span><br><span class="line">print val       <span class="comment">#输出hello（换行）</span></span><br><span class="line">print <span class="string">&quot;hello&quot;</span>   <span class="comment">#输出hello（不换行）</span></span><br><span class="line">putc val        <span class="comment">#输出为h</span></span><br><span class="line">putc <span class="string">&quot;hello&quot;</span>    <span class="comment">#输出为h</span></span><br></pre></td></tr></table></figure>

<h5 id="here-document"><a href="#here-document" class="headerlink" title="here document"></a>here document</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;ruby中有一种here document用于输出多行字符串。here document通过<code>&lt;&lt;</code>运算符指定结束标记，输出结束标记前的所有文本。结束标记可以用双引号框起来也可以不狂</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;example：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="string">    this is a string;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">print &lt;&lt;<span class="string">&quot;10&quot;</span>,&lt;&lt;<span class="string">&quot;20&quot;</span></span><br><span class="line">    <span class="number">123456789</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">    <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">puts <span class="string">&lt;&lt;hello,&lt;&lt;&quot;good bye&quot;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">that&#x27;s where we met</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"> </span><br><span class="line">that<span class="string">&#x27;s where we were together</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">good bye</span></span><br></pre></td></tr></table></figure>


<h5 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h5><ol>
<li>文件打开：File.open()和File.new()，两者的不同在于open()可以与块关联，关于块的内容留在后面介绍。</li>
<li>文件关闭： File.close()</li>
<li>读文件：sysread()</li>
<li>写文件： syswrite()</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;看例子：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file new</span></span><br><span class="line">afile = <span class="title class_">File</span>.new(<span class="string">&quot;../../res/input.txt&quot;</span>,<span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> afile</span><br><span class="line">    <span class="comment"># read data</span></span><br><span class="line">    content = afile.sysread(<span class="number">20</span>)</span><br><span class="line">    puts content</span><br><span class="line">    <span class="comment"># write data</span></span><br><span class="line">    content = gets</span><br><span class="line">    afile.rewind</span><br><span class="line">    afile.syswrite(content)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    puts <span class="string">&quot;open failure&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># file close</span></span><br><span class="line">afile.close</span><br><span class="line"><span class="comment"># file.open()</span></span><br><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;../../res/input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">do</span> |<span class="params">aFile</span>|</span><br><span class="line">    content = aFile.sysread(<span class="number">20</span>)</span><br><span class="line">    puts content</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;上面代码中的|aFile|用于定义局部变量。File.new()和File.open()的第二个参数为打开模式，有一下选项：</p>
<ol>
<li>r: 只读模式</li>
<li>w: 只写模式（覆盖）</li>
<li>a: 只写模式（追加）</li>
<li>r+&#x2F;w+&#x2F;a+: 读写模式，区别是r+和w+的文件指针初始位于文件头，a+的文件指正初始位于文件尾；r+在找不到文件时会报错，w+和a+在找不到时会创建新文件。</li>
</ol>
<p>源码链接：&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/aak1247/ruby-learning/tree/master/source/chap1">源码</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;嗯…不小心入了坑，只是记录一下，应该不会花太多时间去学ruby了233</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[启用Win10的Linux子系统]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-linux-on-windows.html</url>
      <content type="html"><![CDATA[<img src="http://qiniu.cdn.hive-intel.com/aak1247/627e58c18900b84e667585fc21cf4e7b.jpg" class="full-image">

<h2 id="Linux-on-Windows简介"><a href="#Linux-on-Windows简介" class="headerlink" title="Linux on Windows简介"></a>Linux on Windows简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Win10一周年版推出了用于Windows的Linux子系统这一功能，最近体验了一下感觉极佳。不说别的，有一个完整的Linux环境就可以完爆一切bash环境了，痛快地卸载了Git for Windows&#x2F;Cygwin&#x2F;minGW&#x2F;msys&#x2F;babun吧！</p>
<span id="more"></span>

<p>&nbsp;&nbsp;&nbsp;&nbsp;Linux子系统和Windows的结合真是有一种神互补。子系统可以挂载windows的文件系统，于是就可以在现有的文件系统下干一个完整的Linux环境所能干的事情。软件丰富更适合日常使用的Windows与开源且适合开发的Linux结合使得开发更加简便，不用再考虑双系统虚拟机这种效率不高的结合方式了，Linux on Windows用一种应用软件的方式实现了系统软件的功能，这一点可以说让人惊艳了。重要的是这样同时运行的两个系统并不是相互独立的，而是可以协作的，以后完全可以使用Windows下的工具进行编码，然后在Linux子系统进行Git提交，当然，它所能够发挥的作用远远不仅于此。</p>
<h2 id="如何启用"><a href="#如何启用" class="headerlink" title="如何启用"></a>如何启用</h2><h3 id="启用Linux子系统"><a href="#启用Linux子系统" class="headerlink" title="启用Linux子系统"></a>启用Linux子系统</h3><blockquote>
<p>备注：在新版本的win10中，直接更改系统功能就可以从应用商店下载Ubuntu，然后通过Ubuntu应用进入就可以自动开始下载。</p>
</blockquote>
<h4 id="启用开发者模式"><a href="#启用开发者模式" class="headerlink" title="启用开发者模式"></a>启用开发者模式</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;系统模式的设定位于所有设置-&gt;更新和安全-&gt;针对开发人员, 更改后如下：</p>
<img src="http://qiniu.cdn.hive-intel.com/aak1247/snipaste20170206_210255.png" width="100%">

<h4 id="更改系统功能"><a href="#更改系统功能" class="headerlink" title="更改系统功能"></a>更改系统功能</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;使用<code>win+X</code>快捷键调出系统管理菜单后点击程序与功能，选择启用或关闭Windows功能，修改“适用于Windows的Linux子系统一项”，勾选之，确认并重启。</p>
<h4 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;使用cmd下载Linux系统。打开功能以后系统中其实还没有安装Linux，需要使用cmd完成安装，这一步可能比较漫长。如果PC中已经安装了bash工具如msys(git for Windows)，打开管理员权限的cmd，输入<code>bash</code>，按照提示一步一步下载即可。下载的过程比较漫长，耐心等待。</p>
<p>下载完成以后配置用户名密码即可愉快地使用ubuntu啦！</p>
<h3 id="启用root权限并建立用户"><a href="#启用root权限并建立用户" class="headerlink" title="启用root权限并建立用户"></a>启用root权限并建立用户</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;接下来可以输入<code>sudo passwd root</code>建立root用户（最高权限）。如果需要的话可以再使用<code>adduser username</code>建立一个新user(不建议使用useradd), 用户的切换通过<code>su username</code>完成。</p>
<p>切换到root用户输入<code>su</code>即可。</p>
<h3 id="完成升级"><a href="#完成升级" class="headerlink" title="完成升级"></a>完成升级</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;启用了root用户，接下来操作就比较方便了，先使用<code>su</code>切到root用户，然后直接使用apt-get完成软件包的升级。（<code>apt-get update</code>和<code>apt-get upgrade</code>）。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果升级过程中出现连接错误（__Assertion__、_method dies_），先把命令再输一次试试。如果cmd保持一个类似于死机的状态太久（比如20分钟），先按一次<code>ctrl+C</code>试试。</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;源的修改有两种方式：</p>
<ol>
<li>通过修改源列表；</li>
<li>通过<code>apt-add-repository</code>命令。</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;源列表文件位于<code>/etc/apt/sources.list</code>，可以使用vim直接完成修改，建议先保存原文件<code>cp /etc/apt/sources.list /etc/apt/sources.list.backup</code>,然后再使用vim编辑，将找到的源直接加在列表后面。使用cmd开vim比较方便的在于可以直接将系统剪贴板的内容帖进去。在插入模式下(按<code>i</code>进入)将光标移到合适的位置，然后鼠标右键点击cmd标题栏，编辑-&gt;粘贴即可。修改完成以后按<code>Esc</code>退出插入模式，输入<code>:x</code>并回车保存并退出。完成以后可以<code>apt-get update</code>和<code>apt-get upgrade</code>来一次。</p>
<h3 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;输入<code>lsb_release -a</code>可以看到当前的系统版本为：ubuntu 14.04.4 LTS, 最新版本为16.04.1 LTS, 可以更新一下。</p>
<ol>
<li><code>apt-get install update-manager</code>安装更新管理器；</li>
<li><code>do-release-upgrade -f DistUpgradeViewNonInteractive -d</code>完成更新。</li>
</ol>
<p>如果上述步骤没有达到更新效果，可以再尝试以下步骤：</p>
<ol>
<li><code>dpkg --configure -a</code></li>
<li><code>apt-get update</code>，更新包列表，这一步可能会询问是否继续，YES即可。</li>
<li><code>apt-get upgrade</code>，升级软件包；</li>
<li><code>apt-get dist-upgrade</code>，完成升级；</li>
<li><code>apt-get autoremove</code>，自动删除不需要的包。</li>
</ol>
<p>如果遇到网络问题，参照<a href="#%E5%AE%8C%E6%88%90%E5%8D%87%E7%BA%A7">完成升级</a> ，解决。完成以后再输入<code>lsb_release -a</code>就是金光闪闪的16.04啦~</p>
<h2 id="优雅地使用"><a href="#优雅地使用" class="headerlink" title="优雅地使用"></a>优雅地使用</h2><h3 id="使用zsh"><a href="#使用zsh" class="headerlink" title="使用zsh"></a>使用zsh</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;ubuntu的默认shell使用bash，但是外观不太好看而且功能不够强大。zsh是一个相对好用一点的shell，可以使用zsh替换默认shell。</p>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><h5 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get install zsh</span></span><br></pre></td></tr></table></figure>

<h5 id="安装wget和git"><a href="#安装wget和git" class="headerlink" title="安装wget和git"></a>安装wget和git</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get install wget git</span></span><br></pre></td></tr></table></figure>

<h5 id="执行oh-my-zsh配置脚本"><a href="#执行oh-my-zsh配置脚本" class="headerlink" title="执行oh-my-zsh配置脚本"></a>执行oh-my-zsh配置脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span></span><br></pre></td></tr></table></figure>

<h5 id="替换默认shell"><a href="#替换默认shell" class="headerlink" title="替换默认shell"></a>替换默认shell</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chsh -s /bin/zsh</span></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;到这里zsh的安装就完成啦，可以关闭命令行然后重新输入<code>bash</code>进入Linux，然后输入<code>su</code>登录root账户查看效果。这时可以输入<code>echo $SHELL</code>查看当前的shell版本。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意</strong>：输入<code>bash</code>进入Linux后其实是一种未登录的状态，需要输入<code>su username</code>切换到指定用户才能正常使用。</p>
<h4 id="zsh配置"><a href="#zsh配置" class="headerlink" title="zsh配置"></a>zsh配置</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;尽管zsh非常强大，但是默认设定还是不够完美，可以通过修改<code>/root/.zshrc</code>文件完成配置的更改，修改完成以后输入<code>source /root/.zshrc</code>即可查看效果。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;zsh的主题可以在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">这里</a> 找到，修改文件中的<code>ZSH_THEME=&quot;robbyrussell&quot;</code>即可更改主题。不过由于cmd本身使用单个字体文件显示字符，所以一些很漂亮的主题可能不太好用，建议选择没有太多特殊符号的主题。由于zsh的配置其实是一件非常有趣的事情，故其包含的内容也非常多，这里就不多说了。</p>
<h3 id="cmd设定"><a href="#cmd设定" class="headerlink" title="cmd设定"></a>cmd设定</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;尽管zsh非常漂亮，但是在cmd中的显示依然要通过cmd的支持，所以建议对cmd也进行一些修改，右键标题栏-&gt;默认值可以设定默认属性，属性项里的设定可以设定本次会话的显示效果。cmd默认使用点阵字体，但是不太好看，推荐使用TrueTypeFont字体。下载好TrueTypeFont字体文件并安装后如果在cmd中无对应选项，可以修改注册表中关于concole的设定。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;找到<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont\</code>添加项即可。如添加000项，值为要添加的字体名。</p>
<h4 id="更好的选择"><a href="#更好的选择" class="headerlink" title="更好的选择"></a>更好的选择</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;推荐使用cmder代替cmd，外观极美的一个命令行工具，关键字高亮、配色和字体都很棒，可定制性很强。不过在cmder中使用Linux on Windows只有登陆后才能正常使用，登录前（输入<code>bash</code>而未切换到具体用户）甚至没有关键字高亮和命令重复的支持。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此外，cmder还提供了对mintty&#x2F;poweshell等的支持。很优雅~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;使用cmder时可以新建一个空的task，在start-up的框中填入<code>%windir%\system32\bash.exe</code>即可。这样可以避免历史命令文件的读取异常，保证正常使用上下键回看历史命令。不过由于cmder对vim的支持不太好，可能会有方向键的问题。解决方法如下：在框中填入<code>%windir%\system32\bash.exe ~ -cur_console:p:n</code>即可。界面如下：</p>
<img src="http://qiniu.cdn.hive-intel.com/aak1247/snipaste20170211_002426.png">

<p>&nbsp;&nbsp;&nbsp;&nbsp;如果遇到vim的visual block模式无法进入的问题，在设置中关闭Ctrl+v的粘贴功能就好:<code>settings-&gt;keys&amp;macro-&gt;paste-&gt;paste mode #2-&gt;do nothing</code>。</p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.reddit.com/user/w2qw">w2qw</a>  提供了一种通过bash运行图形界面软件的方法。主要步骤如下：</p>
<ol>
<li>在Linux中安装图形界面的程序（如Firefox）</li>
<li>安装<a href="https://sourceforge.net/projects/xming/"> Xming X Server for Windows </a></li>
<li>在Linux中输入<code>DISPLAY=:0 firefox</code>）。</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;有兴趣可以体验一下~</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[均分纸牌问题题解]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-oj-codevs-1098.html</url>
      <content type="html"><![CDATA[<p>太久没写C++了，想起来codevs上的题目用来找手感挺好的，做了几道水题。本题目来自于codeVS天梯黄金组，比较简单，使用贪心即可解掉，题目链接：<a href="http://codevs.cn/problem/1098/">codeVS-1089</a> 。</p>
<span id="more"></span>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p> 有 N 堆纸牌，编号分别为 1，2，…, N。每堆上有若干张，但纸牌总数必为 N 的倍数。可以在任一堆上取若于张纸牌，然后移动。<br> 　　移牌规则为：在编号为 1 堆上取的纸牌，只能移到编号为 2 的堆上；在编号为 N 的堆上取的纸牌，只能移到编号为 N-1 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。<br> 　　现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。<br> 　　例如 N&#x3D;4，4 堆纸牌数分别为：<br> 　　①　9　②　8　③　17　④　6<br> 　　移动3次可达到目的：<br> 　　从 ③ 取 4 张牌放到 ④ （9 8 13 10） -&gt; 从 ③ 取 3 张牌放到 ②（9 11 10 10）-&gt; 从 ② 取 1 张牌放到①（10 10 10 10）。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行N（N 堆纸牌，1 &lt;&#x3D; N &lt;&#x3D; 100）<br>第二行A1 A2 … An （N 堆纸牌，每堆纸牌初始数，l&lt;&#x3D; Ai &lt;&#x3D;10000）</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出至屏幕。格式为：<br>所有堆均达到相等时的最少移动次数。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4<br>9 8 17 6</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>3</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ol>
<li>问题的目标函数为使移动次数最少。</li>
<li>考虑其最终结果必须满足每一个堆的个数都等于平均数。对于规模为$n$下的第一堆，与第二堆进行交换使其满足此条件，则剩下的$n-1$堆为规模为$n-1$情况下的相同问题，满足最优子结构性质。</li>
<li>同时，对于规模为n的问题，此问题最优解需交换以满足第一堆的牌数等于平均数，则必须经过第一堆与第二堆交换的步骤（假设第一堆不等于平均数，等于时可以减而治之考虑更小规模的问题）。</li>
<li>假定第二堆牌数可以为负，则第一堆的处理可以在与第二堆的一次交换中实现。假设在问题规模为n时，存在一个最少交换方案即最优方案。同时设包含当前在一次交换中实现第一堆处理的操作同时在从第二堆到第n堆的处理中与最优方案策略相同的方案为方案A。则此最优方案对于第一堆的处理一定给出一个不劣于方案A 的策略，即最多进行一次交换，同时也必须进行一次交换，即此最优方案与方案A具有相同的交换次数，方案A是一个最优方案（满足贪心选择性）。</li>
<li>此时考虑第二堆牌数不可为负，此时仅需考虑第一堆的个数不足平均数的情形。对于第二堆牌的交换分为向第一堆移动和与第三堆交换两类，此时推迟向第一堆移动的交换到与第三堆交换之后，同时不改变可以为负条件下其他的交换，即可保证第二堆牌数为正，且不改变总交换次数。</li>
<li>综上，从左到右求解可以为负情形下的问题即可求出最少的交换次数。</li>
</ol>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> memset(x) memset(x,0,sizeof(x));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> times = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">divide</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[l]&gt;res)&#123;</span><br><span class="line">        ++times;</span><br><span class="line">        a[l<span class="number">+1</span>]+=(a[l]-res);</span><br><span class="line">        a[l]=res;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[l]&lt;res)&#123;</span><br><span class="line">        a[l<span class="number">+1</span>]-=(res-a[l]);</span><br><span class="line">        a[l]=res;</span><br><span class="line">        times++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">divide</span>(l<span class="number">+1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res = sum/n;</span><br><span class="line">    <span class="built_in">divide</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;times;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oj </tag>
            
            <tag> 算法 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017寒假计划]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-plan-20170125.html</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;大三的寒假很快就过去了一小半，除了搭好了博客之外竟然什么也没有做，不禁自问：我是谁？我在哪？我在干什么？？？<br>&nbsp;&nbsp;&nbsp;&nbsp;想做一点微小的工作于是看了几个node module的源码，但是难以静下来深入研究，浅尝辄止什么的真是浪费时间啊。大部分<br>时间都用来划水摸鱼了…剩下的22天还是计划一下比较好。</p>
<span id="more"></span>
<h3 id="nbsp-nbsp-nbsp-nbsp-时间规划"><a href="#nbsp-nbsp-nbsp-nbsp-时间规划" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;时间规划"></a>&nbsp;&nbsp;&nbsp;&nbsp;时间规划</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;1月26号起到2月17日共22天。除去过年除夕和花费在交通中的时间，有效的工作时间大概只有9*24-8&#x3D;208小时。想要学的东西太多，<br>计划学react&#x2F;ruby&#x2F;haml&#x2F;kotlin&#x2F;functional programming&#x2F;LeetCode&#x2F;学英语&#x2F;SVM&#x2F;…都是不小的工程，平均下来大概一项只有20多小时，还是不太现实。<br>比较一下先按照艾森豪威尔法则排序，LeetCode&gt;functional programming&gt;kotlin&gt;学英语&gt;ruby&gt;react&gt;SVM&gt;haml。嗯…还有读书~</p>
<ol>
<li>LeetCode： 每天2题，记4小时。22天共44题，记88小时。</li>
<li>函数式： 主要学习java 8&#x2F;c++ 11 新特性（其实已经不新了…）lambda 表达式、java 8 流操作等，记10小时</li>
<li>学习kotlin，作为java学习的延伸吧~ 不包含尝试利用kotlin写安卓。记40小时。</li>
<li>学英语，每天2小时，记44小时。</li>
<li>时间差不多啦，剩下的时间用来记录和读书吧~记26小时。</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;希望能够有所提高~加油!</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使hexo显得自己更有逼格（三）——自定义与优化]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-hexo-next-3.html</url>
      <content type="html"><![CDATA[<h2 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h2><p>  考虑到站点的稳定性和加载速度等，可以使用延迟加载图片等方式提高响应速度。hexo还提供了一个最小化静态文件的插件<code>hexo-all-minifier</code>可以压缩html、css、js和图像文件，删除文件中多余的换行等。通过在<strong>站点</strong>配置文件中加入以下配置：</p>
<span id="more"></span>
  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">css_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">js_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image_minifier:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">interlaced:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">multipass:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">optimizationLevel:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">pngquant:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">progressive:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>  然后安装插件（通过在<code>package.json</code>中加入<code>&quot;hexo-all-minifier&quot;: &quot;^0.0.14&quot;</code>依赖项）即可实现压缩静态内容。</p>
<h2 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h2><p>  以next主题为例，可以直接修改<code>.swig</code>文件修改对应页面，通过修改<code>page.swig</code>文件可以更改页面的主体内容模板，通过<code>page.type</code>字段可以进行页面类型的定义和判断。可以自定义新的<code>type</code>加入判断即可。自定义新的<code>.swig</code>文件，通过<br>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include xxx %&#125;</span><br></pre></td></tr></table></figure><br>  引入。css和js文件可以在<code>next/layout/_partials/custom_head.swig</code>中引入。建议对于已有的样式定义更高优先级的样式进行覆盖，不建议直接修改原样式。另外css的修改可以直接在<code>next/source/css/_custom/custom.styl</code>中添加。</p>
<p>  侧边栏的链接图标可以在<code>next/layout/_macro/sidebar.swig</code>中修改，fontawesome对于国内平台的支持不是很全面，可以使用<a href="http://www.iconfont.cn/">阿里巴巴矢量图库</a>添加更多图标。在文件中找到如下内容：</p>
  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;links-of-author motion-element&quot;&gt;</span><br><span class="line">  &#123;% if theme<span class="selector-class">.social</span> %&#125;</span><br><span class="line">    &#123;% for name, link in theme<span class="selector-class">.social</span> %&#125;</span><br><span class="line">      &lt;<span class="selector-tag">span</span> class=&quot;links-of-author-item&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> href=&quot;&#123;&#123; link &#125;&#125;&quot; target=&quot;_blank&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot;&gt;</span><br><span class="line">          &#123;% if theme<span class="selector-class">.social_icons</span><span class="selector-class">.enable</span> %&#125;</span><br><span class="line">  <span class="comment">//这里是修改的结果：</span></span><br><span class="line">            &lt;<span class="selector-tag">svg</span> class=&quot;<span class="attribute">icon</span>-<span class="selector-tag">symbol</span>&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">              &lt;<span class="selector-tag">use</span> xlink:href=<span class="string">&quot;#icon-&#123;&#123;theme.social_icons[name] | default(&#x27;link&#x27;) | lower&#125;&#125;&quot;</span>&gt;&lt;/use&gt;</span><br><span class="line">            &lt;/svg&gt;</span><br><span class="line">  //以上</span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">          &#123;&#123; name &#125;&#125;</span><br><span class="line">        &lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">      &lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>  然后在custom.styl中加入<code>.icon-symbol</code>的样式表：</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-symbol</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  <span class="attribute">fill</span>: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  随后在登录<a href="http://www.iconfont.cn/">阿里巴巴矢量图库</a>创建应用，并引入图库，获取到产生svg图像的js代码，并引入<code>next/layout/_partials/custom_head.swig</code> ，即可使用与原生fontawesome图标类似的方式定义图标。</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 静态博客 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo部署中遇到的一些问题]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-hexo-problems.html</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;有一种遍地是坑的感觉，还是<code>too young</code> ，hexo官方提供的<a href="https://hexo.io/docs/troubleshooting.html">错误文档</a>提供了一些提示，不过没有提供错误的log很难定位属于哪一种。遇到过的错误如下</p>
<span id="more"></span>
<h3 id="配置文件缺少逗号"><a href="#配置文件缺少逗号" class="headerlink" title="配置文件缺少逗号"></a>配置文件缺少逗号</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;报错信息如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FATAL missed comma between flow collection entries at line 33, column 11:</span><br><span class="line"></span><br><span class="line">              <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line"></span><br><span class="line">              ^</span><br><span class="line"></span><br><span class="line">YAMLException: missed comma between flow collection entries at line 33, column 11:</span><br><span class="line"></span><br><span class="line">              <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line"></span><br><span class="line">              ^</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;yaml文件语言要求在每一个冒号后面追加一个空格，这也是一种良好地代码风格。</p>
<h3 id="配置文件缺少空格"><a href="#配置文件缺少空格" class="headerlink" title="配置文件缺少空格"></a>配置文件缺少空格</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YAMLException: end of the stream or a document separator is expected at line x, column y:</span><br></pre></td></tr></table></figure>



<h3 id="渲染器的bug"><a href="#渲染器的bug" class="headerlink" title="渲染器的bug"></a>渲染器的bug</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如下符合swig&#x2F;nunjucks语法的代码：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; xxx &#125;&#125;</span><br><span class="line">&#123;% xxx %&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;可能会引发报错。如果写在块儿级代码块儿中没有问题，但是如果写在行内代码中``之间``  就可能引发报错，报错信息如：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br><span class="line">Template render error: (unknown path) [Line 7, Column 23]</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br><span class="line">Template render error: (unknown path)</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;可以将语句写在块儿级代码中，因为hexo不会渲染&lt;pre&gt;与&lt;&#x2F;pre&gt;之间的内容，markdown的块儿级代码被解析为:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">	......</span><br><span class="line">	<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;也可以通过利用nunjucks的raw标签进行屏蔽。</p>
<h3 id="markdown文件书写不规范"><a href="#markdown文件书写不规范" class="headerlink" title="markdown文件书写不规范"></a>markdown文件书写不规范</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;hexo所采用的markdown渲染器要求markdown文件标签前缀与内容之间间隔一个半角空格，如果不符合此规范可能会无法渲染。如标题显示###标题而不是格式化的标题。添加一个空格即可。</p>
<h3 id="https与http混合问题"><a href="#https与http混合问题" class="headerlink" title="https与http混合问题"></a>https与http混合问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;HTTPS是使用SSL的安全传输协议，自然对于页面中使用HTTP协议传输的内容存在一些限制。如果在https页面中使用http资源就可能导致资源加载异常。主要的异常有以下几种：</p>
<ol>
<li>js和flash资源： 直接被浏览器屏蔽</li>
<li>其他页面资源： 弹出提示框询问是否加载或屏蔽</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当然，也有正常加载的情况。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;对于HTTPS页面中的HTTP资源，可以使用以下两种方式进行加载，避免可能出现的加载异常问题。</p>
<h4 id="使用iframe进行加载"><a href="#使用iframe进行加载" class="headerlink" title="使用iframe进行加载"></a>使用iframe进行加载</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;浏览器会阻止https页面中直接请求http资源，但是如果是在HTTPS页面中嵌入的iframe中请求就不再有问题了，可以通过一个不显示的iframe完成对http资源的请求，这样就绕过了浏览器对https页面中http请求的屏蔽。</p>
<h4 id="使用相对协议加载"><a href="#使用相对协议加载" class="headerlink" title="使用相对协议加载"></a>使用相对协议加载</h4><h5 id="相对协议"><a href="#相对协议" class="headerlink" title="相对协议"></a>相对协议</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;相对协议简言之就是省略掉协议类型而直接写链接路径的请求方式，例如<code>&lt;img src=&quot;//baidu.com.gif&quot;&gt;</code>, 浏览器会根据页面类型请求资源，例如在HTTPS页面中就使用HTTPS协议的方式请求资源。css文件也可以使用此方式。</p>
<blockquote>
<p>注意：&lt;link&gt; 或 @import 引入样式表时使用相对协议，IE7、IE8会下载文件两次</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;另外，在github page中使用不支持https的资源，如果采用相对协议可能会导致加载异常缓慢，对于一部分资源（图片等）可以采用http的方式加载，当然更好的方式是采用本地文件进行加载，或者单独建立用于存储静态文件的repo。另外github其实还有一个存储其他文件的服务器，也可以将文件放在issue中通过链接访问。</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 问题 </tag>
            
            <tag> 错误记录 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使hexo显得自己更有逼格（二）——功能补充]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-hexo-next-2.html</url>
      <content type="html"><![CDATA[<p>主要介绍一些第三方插件的接入以及几个有趣的功能的实现。</p>
<p>next主题内置了对多说评论的支持，只需要在站点配置文件中加入duoshuo_shortname字段，并填入注册多说时使用的域名后缀即可，详情可以查看<a href="http://theme-next.iissnan.com/third-party-services.html#duoshuo">多说配置</a> 。</p>
<h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><p>官方的版本未提供对留言板的支持，不过这个可以通过一些方式很简单地实现。为了在导航菜单上添加留言板，需要修改主题配置文件(<code>path=&#39;next/&#39;</code>) 的menu项，加入message字段并给出页面路径，在<code>menu_icons</code>中加入图标的映射。</p>
<span id="more"></span>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span> </span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">/message</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">calendar</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">sitemap</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">heartbeat</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">comment</span></span><br></pre></td></tr></table></figure>

<p>如果这时部署，你会发现菜单栏显示的标签为”menu.message”，这时由于语言文件中无对应项所致。语言文件的路径为：<code>next/languages/</code>，如果当前使用中文，修改路径下的<code>zh-Hans.yml</code>即可</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">message:</span> <span class="string">留言板</span></span><br></pre></td></tr></table></figure>

<p>完成菜单创建以后还需要创建对应页面，只需要在站点的根目录下创建一个<code>/message</code>文件夹，在文件夹下建立<code>index.md</code>文件即可，具体内容根据实现方式而定。</p>
<h4 id="使用多说评论实现"><a href="#使用多说评论实现" class="headerlink" title="使用多说评论实现"></a>使用多说评论实现</h4><p>使用多说评论的实现方式比较简单而且效果比较好，可以添加最近访客，并且评论比较方便。</p>
<h5 id="添加最近访客"><a href="#添加最近访客" class="headerlink" title="添加最近访客"></a>添加最近访客</h5><p>对于已开启多说评论的站点加入以下代码即可，直接在<code>index.md</code>文件的结尾加入。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ds-recent-visitors&quot;</span> <span class="attr">data-num-items</span>=<span class="string">&quot;28&quot;</span> <span class="attr">data-avatar-size</span>=<span class="string">&quot;42&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ds-recent-visitors&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以修改主题默认的多说样式来定义外观，stylus文件路径为<code>next/source/css/_common/components/third-party/duoshuo.styl </code>，加入以下配置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  //这里是自定义的多说最近访客头像样式css</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面文件<code>index.md</code>可以如下定义：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 留言板</span><br><span class="line"><span class="section">date: 2017-01-21 15:21:45</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span></span>欢迎留言<span class="language-xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="quote">&gt; 最近访客</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ds-recent-visitors&quot;</span> <span class="attr">data-num-items</span>=<span class="string">&quot;28&quot;</span> <span class="attr">data-avatar-size</span>=<span class="string">&quot;42&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ds-recent-visitors&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果参考：</p>
  <img src="http://qiniu.cdn.hive-intel.com/aak1247/snipaste20170121_152642.png" class="full-image">

<h4 id="使用github-issue实现"><a href="#使用github-issue实现" class="headerlink" title="使用github issue实现"></a>使用github issue实现</h4><p>使用github issue也可以实现这一功能，github API为获取github的内容提供了支持，可以通过获取issue list或单个issue来实现。以单个issue的情况为例。</p>
<p>**RESTful API: **</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /repos/:owner/:repo/issues/:number</span><br></pre></td></tr></table></figure>

<p>  <strong>Response:</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">Status<span class="punctuation">:</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/issues/1347&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;labels_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/issues/1347/labels&#123;/name&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/issues/1347/comments&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/issues/1347/events&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat/Hello-World/issues/1347&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="number">1347</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Found a bug&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I&#x27;m having a problem with this.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gravatar_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;followers_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/followers&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;following_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/following&#123;/other_user&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gists_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/gists&#123;/gist_id&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;starred_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscriptions_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/subscriptions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;organizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/orgs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repos_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/repos&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/events&#123;/privacy&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;received_events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/received_events&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;User&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site_admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">208045946</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/labels/bug&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bug&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f29513&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;assignee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gravatar_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;followers_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/followers&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;following_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/following&#123;/other_user&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gists_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/gists&#123;/gist_id&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;starred_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscriptions_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/subscriptions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;organizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/orgs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repos_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/repos&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/events&#123;/privacy&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;received_events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/received_events&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;User&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site_admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;milestone&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/milestones/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat/Hello-World/milestones/v1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;labels_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/milestones/1/labels&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1002604</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tracking milestone for version 1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;creator&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;gravatar_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;followers_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/followers&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;following_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/following&#123;/other_user&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;gists_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/gists&#123;/gist_id&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starred_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;subscriptions_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/subscriptions&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;organizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/orgs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;repos_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/repos&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/events&#123;/privacy&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;received_events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/received_events&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;User&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;site_admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;open_issues&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closed_issues&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2011-04-10T20:09:31Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-03-03T18:58:10Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;closed_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2013-02-12T13:22:01Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;due_on&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-09T23:39:01Z&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;locked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pull_request&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/repos/octocat/Hello-World/pulls/1347&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat/Hello-World/pull/1347&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;diff_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat/Hello-World/pull/1347.diff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;patch_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat/Hello-World/pull/1347.patch&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;closed_at&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2011-04-22T13:33:48Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2011-04-22T13:33:48Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;closed_by&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gravatar_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/octocat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;followers_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/followers&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;following_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/following&#123;/other_user&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gists_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/gists&#123;/gist_id&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;starred_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscriptions_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/subscriptions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;organizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/orgs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repos_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/repos&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/events&#123;/privacy&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;received_events_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/users/octocat/received_events&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;User&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site_admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>  可以利用异步加载提高载入速度，js文件如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ghComment = $(<span class="string">&quot;#gh-comments&quot;</span>) ;</span><br><span class="line"><span class="comment">//var ghComment_count = $(&quot;gh-comments-count&quot;) ;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatNumber</span>(<span class="params">val, len</span>)  &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="string">&quot;&quot;</span> + val;</span><br><span class="line">    len = len || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (num.<span class="property">length</span> &lt; len)  &#123;</span><br><span class="line">        num = <span class="string">&quot;0&quot;</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">str</span>)  &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(str) ) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">formatNumber</span>(date.<span class="title function_">getFullYear</span>() )  + <span class="string">&#x27;-&#x27;</span> + <span class="title function_">formatNumber</span>(date.<span class="title function_">getMonth</span>()  + <span class="number">1</span>)  + <span class="string">&#x27;-&#x27;</span> + <span class="title function_">formatNumber</span>(date.<span class="title function_">getDate</span>() )  + </span><br><span class="line">            <span class="string">&quot; &quot;</span> + <span class="title function_">formatNumber</span>(date.<span class="title function_">getHours</span>() )  + <span class="string">&quot;:&quot;</span> + <span class="title function_">formatNumber</span>(date.<span class="title function_">getMinutes</span>() )  + <span class="string">&quot;:&quot;</span> + <span class="title function_">formatNumber</span>(date.<span class="title function_">getSeconds</span>() ) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadComments</span>(<span class="params">data</span>)  &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load comments&quot;</span>) ;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gh-comments-count&quot;</span>) .<span class="property">innerHTML</span> = data.<span class="property">length</span>.<span class="title function_">toString</span>() ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)  &#123;</span><br><span class="line">        <span class="keyword">var</span> cuser = data[i].<span class="property">user</span>.<span class="property">login</span>;</span><br><span class="line">        <span class="keyword">var</span> cuserlink = <span class="string">&#x27;https://www.github.com/&#x27;</span> + data[i].<span class="property">user</span>.<span class="property">login</span>;</span><br><span class="line">        <span class="keyword">var</span> cbody = data[i].<span class="property">body_html</span>;</span><br><span class="line">        <span class="keyword">var</span> cavatarlink = data[i].<span class="property">user</span>.<span class="property">avatar_url</span>;</span><br><span class="line">        <span class="keyword">var</span> cdate = <span class="title function_">formatDate</span>(data[i].<span class="property">created_at</span>) ;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(cbody) ;</span><br><span class="line">        ghComment.<span class="title function_">append</span>(<span class="string">&#x27;&lt;div class=&quot;gh-single-comment&quot;&gt;&lt;div class=&quot;commentgravatar&quot;&gt;&lt;a href=&quot;&#x27;</span>+</span><br><span class="line">        + cuserlink +<span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;&#x27;</span> </span><br><span class="line">        + cavatarlink + <span class="string">&#x27;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;commentheader&quot;&gt;&lt;a class=&quot;commentuser&quot; href=&quot;&#x27;</span> </span><br><span class="line">        + cuserlink + <span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span> + cuser + <span class="string">&#x27;&lt;/a&gt;&lt;span class=&quot;commentdate&quot;&gt;&#x27;</span> </span><br><span class="line">        + cdate + <span class="string">&#x27;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;commentbody&quot;&gt;&#x27;</span> + cbody + <span class="string">&#x27;&lt;/div&gt;&lt;/div&gt;&#x27;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(<span class="string">&#x27;https://api.github.com/repos/aak1247/aak1247.github.io/issues/1/comments?per_page=100&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Accept</span>: <span class="string">&#x27;application/vnd.github.full+json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: loadComments</span><br><span class="line">&#125;) ;</span><br></pre></td></tr></table></figure>

<p>  将JS文件保存到<code>next/js</code>路径下。</p>
<p>  添加issue.swig文件到<code>next/latout/_custom/</code>，其内容为：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">blockquote</span> class=&quot;<span class="selector-tag">blockquote</span>-center leave-message&quot;&gt;快来留言吧！~请在 &lt;<span class="selector-tag">a</span> href=&quot;https://github.com/aak1247/aak1247.github.io/issues/<span class="number">1</span><span class="string">&quot; target=&quot;</span>_blank<span class="string">&quot;&gt;Github issue&lt;/a&gt; 页面完成操作&lt;/blockquote&gt;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;</span>messages<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div id=&quot;</span>gh-comments-info<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;</span>javascript:<span class="built_in">void</span>(<span class="number">0</span>) ;&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> id=&quot;gh-comments-count&quot;&gt;<span class="number">0</span>&lt;/<span class="selector-tag">span</span>&gt;条留言&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> id=&quot;gh-comments&quot; style=&quot;<span class="attribute">opacity</span>: <span class="number">1</span><span class="string">&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script src=&quot;</span>https://cdn.jsdelivr.net/jquery/<span class="number">2.1</span>.<span class="number">3</span>/jquery.min.js<span class="string">&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type=&quot;</span>text/javascript<span class="string">&quot; src=&quot;</span>&#123;&#123; <span class="built_in">url_for</span>(theme.js)  &#125;&#125;/<span class="attribute">src</span>/issue<span class="selector-class">.js</span>&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>  修改page.swig文件，在<code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</code>中，找到</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>  在其上方加入如下：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elif page<span class="selector-class">.type</span> === &#x27;issue&#x27; %&#125;</span><br><span class="line">  &#123;% include &#x27;_custom/issue<span class="selector-class">.swig</span>&#x27; %&#125;</span><br></pre></td></tr></table></figure>

<p>  使添加的issue.swig文件能够包含进来。</p>
<p>  然后在<code>index.md</code>中写入：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 留言板</span><br><span class="line">date: 2017-01-17 16:27:30</span><br><span class="line">type: &quot;issue&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>  效果如下：</p>
<p>  <img src="http://qiniu.cdn.hive-intel.com/aak1247/snipaste20170121_163304.png" class="full-image"/>       </p>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>  next主题内置了对algolia-search&#x2F;tinysearch&#x2F;swiftsearch的支持，同时也提供了一个local search的插件，考虑到第三方服务的不稳定性以及可能付费等等问题，推荐使用local search，只需要在站点配置文件中加入：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>  同时在package.json中加入<code>&quot;hexo-generator-search&quot;: &quot;^1.0.2&quot;</code>依赖项即可。本地部署的可以手动输入<code>npm i</code>完成依赖项的安装，使用Travis自动部署时无需修改配置脚本。效果可以在<a href="http://aak1247.coding.me/">黑境</a> 中预览。</p>
<h3 id="简繁切换"><a href="#简繁切换" class="headerlink" title="简繁切换"></a>简繁切换</h3><p>  这是一个通用的方法，使用js处理可以避免后端语言的差异，代码来自网上。只需要将 cookdomain修改为你的页面地址即可。链接：<a href="https://github.com/aak1247/warehouse/blob/master/codes/js/tw-cn.js">tw-cn.js</a> </p>
<h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>  只需要在站点配置文件中加入：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>  在<code>package.json</code>中加入依赖项<code>&quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;</code>即可。</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 静态博客 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使hexo显得自己更有逼格（一）——开始使用]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-hexo-next-1.html</url>
      <content type="html"><![CDATA[<p>​	感谢铮神（<a href="http://zccz14.com/">@zccz14</a> ）的博客，成功使用Travis CI和github实现了博客的自动部署。最近几天一直在折腾hexo，就讲一下自己的一点经验。因为我只用了<a href="http://theme-next.iissnan.com/">next主题</a>  ，所以以下所有的配置也都是针对next主题的，其他主题也大致相似。</p>
<h2 id="开始使用Hexo与主题配置"><a href="#开始使用Hexo与主题配置" class="headerlink" title="开始使用Hexo与主题配置"></a>开始使用Hexo与主题配置</h2><p>优先参考 <a href="https://hexo.io/zh-cn/docs/">官方文档</a> ，大部分问题都可以在官方文档中找到答案。</p>
<span id="more"></span>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>hexo使用node.js编写，所以要正常地使用首先需要安装node。同时也需要安装Git，对于后续的部署和版本控制都十分有用，并且hexo的一些命令需要基于Git命令来完成，关于Git的使用可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/">Git教程</a>  。安装完成后在命令行中使用node附带的包管理器安装hexo:<code>npm install -g hexo-cli</code>。安装完成后即可使用hexo命令。<br>  ​</p>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol>
<li>建立文件夹<code>&lt;folder&gt;</code>，然后输入<code>$ hexo init &lt;folder&gt;</code>命令，初始化文件夹内部结构。</li>
</ol>
<p>  其中<code>_config.yml</code>是项目的站点配置文件，记录一些全局的变量信息，可以使用yaml和json格式书写；</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">黑境</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://aak1247.coding.me/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">author:</span> <span class="string">aak1247</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Still</span> <span class="string">waters</span> <span class="string">run</span> <span class="string">deep</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>


<p><code>package.json</code>文件是项目的node包信息，主要记录当前版本号和依赖项，是nodejs默认生成的一个东西，也是执行<code>npm install</code>命令时的依据文件，npm会根据它包含的依赖项自动安装包。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.2.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>  ​</p>
<ol start="2">
<li><p>修改配置和发布文章，这也是博客使用的主要内容。</p>
</li>
<li><p>通过修改_config.yml文件修改配置。</p>
<ol>
<li>官方推荐的方式为使用<code>hexo new article</code>建立新文章。也可以手动在source&#x2F;_posts&#x2F;路径下建立markdown文件来撰写文章。</li>
</ol>
</li>
<li><p>使用 <code>hexo generate</code>命令生成静态博客，所有的内容位于public目录下。站点路径下以下划线开头的文件和文件夹不会被渲染。生成以后可以将public目录下的文件部署到服务器来建立可访问的博客。完成以后可以通过<code>hexo server</code>来启用本地服务器预览博客。</p>
</li>
</ol>
<h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><p>这一部分内容参考<a href="zccz14.com">@zccz14</a> 的博客<a href="https://zccz14.com/2016/12/30/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo/">优雅地使用Hexo</a> ，使用Travis CI自动执行脚本的方式，动态生成静态博客内容并push到git repo中，完成部署。由于github主动屏蔽了百度的内容抓取，没有域名的情况下推荐使用coding.net提供的coding pages服务（<a href="https://coding.net/help/doc/pages/index.html">Coding Pages 介绍</a>  ），具体使用与Github pages相同。</p>
<p>在项目根目录下建立.travis.yml文件如下:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language</span>: node_js</span><br><span class="line"><span class="attr">node_js</span>: </span><br><span class="line">    - <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="attr">before_install</span>:</span><br><span class="line">    - git config --<span class="variable language_">global</span> user.<span class="property">email</span> $GITHUB_EMAIL</span><br><span class="line">    - git config --<span class="variable language_">global</span> user.<span class="property">name</span> $GITHUB_USERNAME</span><br><span class="line">    - npm i hexo-cli -g</span><br><span class="line">    - git clone $THEME_URI themes/$THEME_NAME</span><br><span class="line"><span class="attr">script</span>:</span><br><span class="line">    - hexo config theme $THEME_NAME</span><br><span class="line">    - hexo generate</span><br><span class="line"><span class="attr">after_success</span>:</span><br><span class="line">    - cd <span class="keyword">public</span></span><br><span class="line">    - git init</span><br><span class="line">    - git add .</span><br><span class="line">    - git commit -m <span class="string">&quot;Travis Deploy&quot;</span></span><br><span class="line">    - git push -f -q <span class="attr">https</span>:<span class="comment">//$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/$GITHUB_USERNAME/$GITHUB_USERNAME.github.io master</span></span><br><span class="line">    - git push -f -q <span class="attr">https</span>:<span class="comment">//$CODING_USERNAME:$CODING_PASSWORD@git.coding.net/$CODING_USERNAME/$CODING_USERNAME.coding.me master</span></span><br></pre></td></tr></table></figure>

<p>登录Travis CI，在setting中设置变量，在.travis.yml中可以通过$var方式调用变量值。配置好以后每一次对项目的提交都会使Travis CI进行一次自动部署，将生成的静态博客推送到github pages对应repo和coding pages对应repo。</p>
<h3 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h3><p>站点的配置可以参考<a href="https://hexo.io/zh-cn/docs/">官方文档</a> 的说明，大部分设置项都有不需要修改的默认值，可以参考我上面的<a href="#使用步骤">_config.yml</a>内容，需要添加第三方插件时直接加入相关配置即可。</p>
]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next主题 </tag>
            
            <tag> 静态博客 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于2014/2015及2016的总结]]></title>
      <url>http://www.aak1247.cn/blogs/2017/older-summary-20170114.html</url>
      <content type="html"><![CDATA[<p>​	上大学之后断了写日记的习惯，2年来只写过极少的几篇短文。放假以后回到家感觉很多事物都陌生起来，想想这两年自己不小的变化，只觉得有一种“少小离家老大回，乡音无改鬓毛衰”的错觉。</p>
<p>​	回头看在沙坡的两年半时间，不由得不感慨万分。</p>
<span id="more"></span>
<p>​	从小学时就想学建筑，后来因为一点点运气而难以去到同济，于是带着“曾经沧海难为水”的心情再也不想去看与建筑有关的东西。这样随便地来了软件工程多少有一点先天不足，好在发现软件与建筑的极大相似之后对于所学也产生了极大的兴趣，一天天学习着陌生而逐渐熟悉起来的东西总算是重新找到了生活美的一面。于是一天一天地成为了一个不大懂得生活的程序员……</p>
<p>​	大一时全心全意地沉湎于遗憾和迷茫，一年的时间仿佛什么也没有做过。粗略地学了Python&#x2F;C&#x2F;C with class&#x2F;HTML&#x2F;CSS以及一点点JS，空闲里学了一点点摄影和PS，画了一点画，然而一点书也没有看过，评奖学金仿佛噩梦一般，好在总算没有挂科，真是励志。小学期带着队友写网页，尽管技术渣但还是拿到了最佳团队奖，感谢CCTV！大一一年算法没有入门也没做过什么很有用的项目，好空虚啊！！！</p>
<p>​	大二一门心思地准备数模，然而因为一点奇怪的原因没能参加美赛，还放弃了大一的国赛。最终只拿了一枚国赛省一，不胜唏嘘。有一种拳打空气的感觉。抽空水了一次ACM省赛，队友强力carry到了银，尽管结果有一些不尽如人意不过总算是有了一点起色。看了算导、C primer plus以及thinking in java然而还是什么也不会，空闲里学了一点点俄语，在不务正业的道路上越走越远。小学期因为ACM同课程设计以及数模冲突，无奈放弃，于是没有机会参加区域赛了。学院的集训是还是做网站，培训的老师在微软干过几年，工程大概是依照微软的工作模型做了一遍。大二这一年最大的收获大概是真正选择了自己要走的路，找到了自己所热爱的方向。人生的选择很难说好坏，重要的是认真地做出自己喜欢的选择，忠诚于自己。Keep fighting!</p>
<p>​	到大三也许才可以说是一个合格的软件工程学生了，和同学一起写了<a href="https://github.com/function-x/Orange-Juice">Orange Juice</a>，开始使用Git写工程，认真地做完了每一门课程设计，学会了Win32 汇编&#x2F;x86 汇编，写了几个小玩意儿，成绩也好了许多，还学了一点德语，嗯，希望在剩下的一学期不那么咸鱼。加油:)</p>
<hr>
<p>​	年轻时觉得大学是一个博览群书成为全才的时期，后来才发现博览群书是属于自己的事情，真正属于社会属于学校的优秀恰恰就是成为一个螺丝钉那样的专业性人才。好在仍能不改初衷，用最大的热情完成和做好每一件喜欢的事情，不断地开新坑，尽管在成绩上未能达成所愿但仍可以说学有所获。大学所提供给我的，除了peer preasure 之外就是丰富的选修与辅修，在我，这才是大学的意义所在。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> feelings </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
